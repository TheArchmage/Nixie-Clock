
Divergence Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00001ede  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800160  00800160  00001fd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e73  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ed  00000000  00000000  000050d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9c  00000000  00000000  000058c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006dc  00000000  00000000  00006560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007a2  00000000  00000000  00006c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014c1  00000000  00000000  000073de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0000889f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <__vector_3>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_11>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	6a 07       	cpc	r22, r26
      6a:	71 07       	cpc	r23, r17
      6c:	78 07       	cpc	r23, r24
      6e:	91 07       	cpc	r25, r17
      70:	98 07       	cpc	r25, r24
      72:	9f 07       	cpc	r25, r31
      74:	b0 07       	cpc	r27, r16
      76:	c5 07       	cpc	r28, r21
      78:	cc 07       	cpc	r28, r28
      7a:	d1 07       	cpc	r29, r17
      7c:	4d 0a       	sbc	r4, r29
      7e:	62 0a       	sbc	r6, r18
      80:	76 0a       	sbc	r7, r22
      82:	91 0a       	sbc	r9, r17
      84:	de 07       	cpc	r29, r30
      86:	26 08       	sbc	r2, r6
      88:	48 08       	sbc	r4, r8
      8a:	4b 08       	sbc	r4, r11
      8c:	5a 08       	sbc	r5, r10
      8e:	7c 08       	sbc	r7, r12
      90:	ac 09       	sbc	r26, r12
      92:	ce 09       	sbc	r28, r14
      94:	d9 09       	sbc	r29, r9
      96:	07 0a       	sbc	r0, r23
      98:	31 0a       	sbc	r3, r17
      9a:	3f 0a       	sbc	r3, r31
      9c:	56 0b       	sbc	r21, r22
      9e:	71 0b       	sbc	r23, r17
      a0:	8b 0b       	sbc	r24, r27
      a2:	a5 0b       	sbc	r26, r21
      a4:	bd 0b       	sbc	r27, r29
      a6:	d3 0b       	sbc	r29, r19
      a8:	e9 0b       	sbc	r30, r25
      aa:	ff 0b       	sbc	r31, r31
      ac:	13 0c       	add	r1, r3
      ae:	21 0c       	add	r2, r1
      b0:	2f 0c       	add	r2, r15
      b2:	38 0c       	add	r3, r8

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee ed       	ldi	r30, 0xDE	; 222
      c8:	fe e1       	ldi	r31, 0x1E	; 30
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 36       	cpi	r26, 0x60	; 96
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a0 e6       	ldi	r26, 0x60	; 96
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a9 3e       	cpi	r26, 0xE9	; 233
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 af 00 	call	0x15e	; 0x15e <main>
      ea:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <enableHVPSU>:
	return 1;
}

void enableHVPSU(void)
{
	clearBit(PORT_HVPSUENABLE, BV_HVPSUENABLE);
      f2:	28 98       	cbi	0x05, 0	; 5
      f4:	08 95       	ret

000000f6 <disableHVPSU>:
}

void disableHVPSU(void)
{
	setBit(PORT_HVPSUENABLE, BV_HVPSUENABLE);
      f6:	28 9a       	sbi	0x05, 0	; 5
      f8:	08 95       	ret

000000fa <board_init>:
#include "display_modes.h"

int board_init(void)
{
	//Configure output pins for output
	setBit(DDR_LATCHENABLE, BV_LATCHENABLE);
      fa:	56 9a       	sbi	0x0a, 6	; 10
	setBit(DDR_POLARITY, BV_POLARITY);
      fc:	57 9a       	sbi	0x0a, 7	; 10
	setBit(DDR_BLANKING, BV_BLANKING);
      fe:	3a 9a       	sbi	0x07, 2	; 7
	setBit(DDR_DATA, BV_DATA);
     100:	39 9a       	sbi	0x07, 1	; 7
	setBit(DDR_CLOCK, BV_CLOCK);
     102:	38 9a       	sbi	0x07, 0	; 7
	setBit(DDR_HVPSUENABLE, BV_HVPSUENABLE);
     104:	20 9a       	sbi	0x04, 0	; 4
	setBit(DDR_RTCRESET, BV_RTCRESET);
     106:	55 9a       	sbi	0x0a, 5	; 10
	
	// Configure input pins for input
	clearBit(DDR_BUTTON1, BV_BUTTON1);
     108:	21 98       	cbi	0x04, 1	; 4
	clearBit(DDR_BUTTON2, BV_BUTTON2);
     10a:	27 98       	cbi	0x04, 7	; 4
	
	/*Disable the HV_PSU until the shift registers can be properly configured
	and wait to allow for any residual charge to dissapate */
	disableHVPSU();
     10c:	0e 94 7b 00 	call	0xf6	; 0xf6 <disableHVPSU>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	83 ed       	ldi	r24, 0xD3	; 211
     114:	90 e3       	ldi	r25, 0x30	; 48
     116:	21 50       	subi	r18, 0x01	; 1
     118:	80 40       	sbci	r24, 0x00	; 0
     11a:	90 40       	sbci	r25, 0x00	; 0
     11c:	e1 f7       	brne	.-8      	; 0x116 <board_init+0x1c>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <board_init+0x26>
     120:	00 00       	nop
	_delay_ms(2000);
	
	/*Set the Shift Registers to an initial configuration which will blank
	the display before initial loading */
	blankDisplay();
     122:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <blankDisplay>
	
	//Set the Latchenable to hold until the loader function loads the registers
	clearBit(PORT_LATCHENABLE, BV_LATCHENABLE);
     126:	5e 98       	cbi	0x0b, 6	; 11
	
	//Initialize the debug USART
	init_usart();
     128:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <init_usart>
	
	//Initialize TWI for the RTC
	init_twi();
     12c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <init_twi>
	
	//Finally activate the HV_PSU to light the tubes (when properly loaded)
	enableHVPSU();
     130:	0e 94 79 00 	call	0xf2	; 0xf2 <enableHVPSU>
	
	init_display_vars();
     134:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <init_display_vars>
	init_states();
     138:	0e 94 90 06 	call	0xd20	; 0xd20 <init_states>
	
	get_time_bcd(time, &time_ampm_bit, &clock_mode_12_24);
     13c:	4c e6       	ldi	r20, 0x6C	; 108
     13e:	51 e0       	ldi	r21, 0x01	; 1
     140:	62 e6       	ldi	r22, 0x62	; 98
     142:	71 e0       	ldi	r23, 0x01	; 1
     144:	8f e6       	ldi	r24, 0x6F	; 111
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
	
	display_refresh_timer_init();
     14c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <display_refresh_timer_init>
	display_mode_timer_init();
     150:	0e 94 31 07 	call	0xe62	; 0xe62 <display_mode_timer_init>
	init_button_interrupts();
     154:	0e 94 25 07 	call	0xe4a	; 0xe4a <init_button_interrupts>
	return 1;
}
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <main>:


int main(void)
{
	//Initialize board hardware
	board_init();
     15e:	0e 94 7d 00 	call	0xfa	; 0xfa <board_init>
     162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x4>

00000164 <get_time_bcd>:

#include "DS3232_driver.h"
#include "twi_driver.h"

void get_time_bcd(uint8_t time_bcd[], uint8_t* ampm, uint8_t* mode_12_24)
{
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	8b 01       	movw	r16, r22
     17a:	7a 01       	movw	r14, r20
	twi_start();
     17c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     180:	80 ed       	ldi	r24, 0xD0	; 208
     182:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_SECONDS);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     18c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     190:	81 ed       	ldi	r24, 0xD1	; 209
     192:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t seconds_bcd = twi_recieve_byte_ack();
     196:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     19a:	c8 2e       	mov	r12, r24
	uint8_t minutes_bcd = twi_recieve_byte_ack();
     19c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     1a0:	b8 2e       	mov	r11, r24
	uint8_t hours_bcd = twi_recieve_byte_noack();
     1a2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     1a6:	d8 2e       	mov	r13, r24
	twi_stop();
     1a8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	//Set the hours 10's place
	if(!(hours_bcd & (1 << DS3232_BV_HOURS_12_24)))
     1ac:	d6 fc       	sbrc	r13, 6
     1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <get_time_bcd+0x6e>
	{
		time_bcd[0] = (hours_bcd & ((1 << DS3232_BV_HOURS_AM_PM_20) | (1 << DS3232_BV_HOURS_10))) >> DS3232_BV_HOURS_10;
     1b0:	2d 2d       	mov	r18, r13
     1b2:	20 73       	andi	r18, 0x30	; 48
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	35 95       	asr	r19
     1b8:	27 95       	ror	r18
     1ba:	35 95       	asr	r19
     1bc:	27 95       	ror	r18
     1be:	35 95       	asr	r19
     1c0:	27 95       	ror	r18
     1c2:	35 95       	asr	r19
     1c4:	27 95       	ror	r18
     1c6:	28 83       	st	Y, r18
		*mode_12_24 = 0;
     1c8:	f7 01       	movw	r30, r14
     1ca:	10 82       	st	Z, r1
		*ampm = 0;
     1cc:	f8 01       	movw	r30, r16
     1ce:	10 82       	st	Z, r1
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <get_time_bcd+0x84>
	}
	else
	{
		time_bcd[0] = ((hours_bcd & (1 << DS3232_BV_HOURS_10)) >> DS3232_BV_HOURS_10);
     1d2:	d4 fa       	bst	r13, 4
     1d4:	88 27       	eor	r24, r24
     1d6:	80 f9       	bld	r24, 0
     1d8:	88 83       	st	Y, r24
		*mode_12_24 = 1;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	f7 01       	movw	r30, r14
     1de:	80 83       	st	Z, r24
		*ampm = (hours_bcd & (1 << DS3232_BV_HOURS_AM_PM_20));
     1e0:	8d 2d       	mov	r24, r13
     1e2:	80 72       	andi	r24, 0x20	; 32
     1e4:	f8 01       	movw	r30, r16
     1e6:	80 83       	st	Z, r24
	}
	//Set the hours 1's place
	time_bcd[1] = hours_bcd % 16;
     1e8:	8d 2d       	mov	r24, r13
     1ea:	8f 70       	andi	r24, 0x0F	; 15
     1ec:	89 83       	std	Y+1, r24	; 0x01
	
	//Set the minutes 10's place
	time_bcd[2] = minutes_bcd >> DS3232_BV_MINUTES_10;
     1ee:	8b 2d       	mov	r24, r11
     1f0:	82 95       	swap	r24
     1f2:	8f 70       	andi	r24, 0x0F	; 15
     1f4:	8a 83       	std	Y+2, r24	; 0x02
	//Set the minutes 1's place
	time_bcd[3] = minutes_bcd % 16;
     1f6:	8b 2d       	mov	r24, r11
     1f8:	8f 70       	andi	r24, 0x0F	; 15
     1fa:	8b 83       	std	Y+3, r24	; 0x03
	
	//Set the seconds 10's place
	time_bcd[4] = seconds_bcd >> DS3232_BV_SECONDS_10;
     1fc:	8c 2d       	mov	r24, r12
     1fe:	82 95       	swap	r24
     200:	8f 70       	andi	r24, 0x0F	; 15
     202:	8c 83       	std	Y+4, r24	; 0x04
	//Set the seconds 1's place
	time_bcd[5] = seconds_bcd % 16;
     204:	8c 2d       	mov	r24, r12
     206:	8f 70       	andi	r24, 0x0F	; 15
     208:	8d 83       	std	Y+5, r24	; 0x05
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	08 95       	ret

0000021e <get_date_bcd>:


void get_date_bcd(uint8_t date_bcd[])
{	
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ec 01       	movw	r28, r24
	twi_start();
     22a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     22e:	80 ed       	ldi	r24, 0xD0	; 208
     230:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_DATE);
     234:	84 e0       	ldi	r24, 0x04	; 4
     236:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     23a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     23e:	81 ed       	ldi	r24, 0xD1	; 209
     240:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t day_bcd = twi_recieve_byte_ack();
     244:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     248:	08 2f       	mov	r16, r24
	uint8_t month_bcd = twi_recieve_byte_ack();
     24a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     24e:	f8 2e       	mov	r15, r24
	uint8_t year_bcd = twi_recieve_byte_noack();
     250:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     254:	18 2f       	mov	r17, r24
	twi_stop();
     256:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	date_bcd[0] = (month_bcd & (1 << DS3232_BV_MONTH_10)) >> DS3232_BV_MONTH_10;
     25a:	f4 fa       	bst	r15, 4
     25c:	88 27       	eor	r24, r24
     25e:	80 f9       	bld	r24, 0
     260:	88 83       	st	Y, r24
	date_bcd[1] = month_bcd % 16;
     262:	8f 2d       	mov	r24, r15
     264:	8f 70       	andi	r24, 0x0F	; 15
     266:	89 83       	std	Y+1, r24	; 0x01
	date_bcd[2] = day_bcd >> DS3232_BV_DATE_10;
     268:	80 2f       	mov	r24, r16
     26a:	82 95       	swap	r24
     26c:	8f 70       	andi	r24, 0x0F	; 15
     26e:	8a 83       	std	Y+2, r24	; 0x02
	date_bcd[3] = day_bcd % 16;
     270:	0f 70       	andi	r16, 0x0F	; 15
     272:	0b 83       	std	Y+3, r16	; 0x03
	date_bcd[4] = year_bcd >> DS3232_BV_YEAR_10;
     274:	81 2f       	mov	r24, r17
     276:	82 95       	swap	r24
     278:	8f 70       	andi	r24, 0x0F	; 15
     27a:	8c 83       	std	Y+4, r24	; 0x04
	date_bcd[5] = year_bcd % 16;
     27c:	1f 70       	andi	r17, 0x0F	; 15
     27e:	1d 83       	std	Y+5, r17	; 0x05
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	08 95       	ret

0000028c <set_hours>:


void set_hours(uint8_t hours)
{
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	c8 2f       	mov	r28, r24
	twi_start();
     292:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     296:	80 ed       	ldi	r24, 0xD0	; 208
     298:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_HOURS);
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     2a2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     2a6:	81 ed       	ldi	r24, 0xD1	; 209
     2a8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t current = twi_recieve_byte_noack();
     2ac:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     2b0:	d8 2f       	mov	r29, r24
	twi_stop();
     2b2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	twi_start();
     2b6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     2ba:	80 ed       	ldi	r24, 0xD0	; 208
     2bc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_HOURS);
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte((current & (1 << DS3232_BV_HOURS_12_24)) | (hours/10 << DS3232_BV_HOURS_10) | (hours % 10));
     2c6:	9d ec       	ldi	r25, 0xCD	; 205
     2c8:	c9 9f       	mul	r28, r25
     2ca:	91 2d       	mov	r25, r1
     2cc:	11 24       	eor	r1, r1
     2ce:	96 95       	lsr	r25
     2d0:	96 95       	lsr	r25
     2d2:	96 95       	lsr	r25
     2d4:	80 e1       	ldi	r24, 0x10	; 16
     2d6:	98 9f       	mul	r25, r24
     2d8:	90 01       	movw	r18, r0
     2da:	11 24       	eor	r1, r1
     2dc:	99 0f       	add	r25, r25
     2de:	89 2f       	mov	r24, r25
     2e0:	88 0f       	add	r24, r24
     2e2:	88 0f       	add	r24, r24
     2e4:	98 0f       	add	r25, r24
     2e6:	c9 1b       	sub	r28, r25
     2e8:	2c 2b       	or	r18, r28
     2ea:	8d 2f       	mov	r24, r29
     2ec:	80 74       	andi	r24, 0x40	; 64
     2ee:	82 2b       	or	r24, r18
     2f0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     2f4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <set_minutes>:

void set_minutes(uint8_t minutes)
{
     2fe:	cf 93       	push	r28
     300:	c8 2f       	mov	r28, r24
	twi_start();
     302:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     306:	80 ed       	ldi	r24, 0xD0	; 208
     308:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_MINUTES);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes % 10));
     312:	8d ec       	ldi	r24, 0xCD	; 205
     314:	c8 9f       	mul	r28, r24
     316:	81 2d       	mov	r24, r1
     318:	11 24       	eor	r1, r1
     31a:	86 95       	lsr	r24
     31c:	86 95       	lsr	r24
     31e:	86 95       	lsr	r24
     320:	90 e1       	ldi	r25, 0x10	; 16
     322:	89 9f       	mul	r24, r25
     324:	90 01       	movw	r18, r0
     326:	11 24       	eor	r1, r1
     328:	88 0f       	add	r24, r24
     32a:	98 2f       	mov	r25, r24
     32c:	99 0f       	add	r25, r25
     32e:	99 0f       	add	r25, r25
     330:	89 0f       	add	r24, r25
     332:	c8 1b       	sub	r28, r24
     334:	8c 2f       	mov	r24, r28
     336:	82 2b       	or	r24, r18
     338:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     33c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <zero_seconds>:

void zero_seconds(void)
{
	twi_start();
     344:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     348:	80 ed       	ldi	r24, 0xD0	; 208
     34a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_SECONDS);
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(0);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     35a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     35e:	08 95       	ret

00000360 <set_month>:
}

void set_month(uint8_t month)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	c8 2f       	mov	r28, r24
	twi_start();
     366:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     36a:	80 ed       	ldi	r24, 0xD0	; 208
     36c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_MONTH);
     370:	85 e0       	ldi	r24, 0x05	; 5
     372:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     376:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     37a:	81 ed       	ldi	r24, 0xD1	; 209
     37c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t current = twi_recieve_byte_noack();
     380:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     384:	d8 2f       	mov	r29, r24
	twi_stop();
     386:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	twi_start();
     38a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     38e:	80 ed       	ldi	r24, 0xD0	; 208
     390:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_MONTH);
     394:	85 e0       	ldi	r24, 0x05	; 5
     396:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte((current & (1 << DS3232_BV_CENTURY)) |
					((month/10) << DS3232_BV_MONTH_10) |
     39a:	9d ec       	ldi	r25, 0xCD	; 205
     39c:	c9 9f       	mul	r28, r25
     39e:	91 2d       	mov	r25, r1
     3a0:	11 24       	eor	r1, r1
     3a2:	96 95       	lsr	r25
     3a4:	96 95       	lsr	r25
     3a6:	96 95       	lsr	r25
     3a8:	80 e1       	ldi	r24, 0x10	; 16
     3aa:	98 9f       	mul	r25, r24
     3ac:	90 01       	movw	r18, r0
     3ae:	11 24       	eor	r1, r1
	twi_stop();
	
	twi_start();
	twi_send_byte(DS3232_ADDRESS_W);
	twi_send_byte(DS3232_PTR_MONTH);
	twi_send_byte((current & (1 << DS3232_BV_CENTURY)) |
     3b0:	99 0f       	add	r25, r25
     3b2:	89 2f       	mov	r24, r25
     3b4:	88 0f       	add	r24, r24
     3b6:	88 0f       	add	r24, r24
     3b8:	98 0f       	add	r25, r24
     3ba:	c9 1b       	sub	r28, r25
     3bc:	2c 2b       	or	r18, r28
     3be:	8d 2f       	mov	r24, r29
     3c0:	80 78       	andi	r24, 0x80	; 128
     3c2:	82 2b       	or	r24, r18
     3c4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
					((month/10) << DS3232_BV_MONTH_10) |
					(month%10));
	twi_stop();
     3c8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <set_day>:

void set_day(uint8_t day)
{
     3d2:	cf 93       	push	r28
     3d4:	c8 2f       	mov	r28, r24
	twi_start();
     3d6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     3da:	80 ed       	ldi	r24, 0xD0	; 208
     3dc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_DATE);
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(((day / 10) << DS3232_BV_DATE_10) | (day % 10));
     3e6:	8d ec       	ldi	r24, 0xCD	; 205
     3e8:	c8 9f       	mul	r28, r24
     3ea:	81 2d       	mov	r24, r1
     3ec:	11 24       	eor	r1, r1
     3ee:	86 95       	lsr	r24
     3f0:	86 95       	lsr	r24
     3f2:	86 95       	lsr	r24
     3f4:	90 e1       	ldi	r25, 0x10	; 16
     3f6:	89 9f       	mul	r24, r25
     3f8:	90 01       	movw	r18, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	88 0f       	add	r24, r24
     3fe:	98 2f       	mov	r25, r24
     400:	99 0f       	add	r25, r25
     402:	99 0f       	add	r25, r25
     404:	89 0f       	add	r24, r25
     406:	c8 1b       	sub	r28, r24
     408:	8c 2f       	mov	r24, r28
     40a:	82 2b       	or	r24, r18
     40c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     410:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <set_year>:

void set_year(uint8_t year)
{
     418:	cf 93       	push	r28
     41a:	c8 2f       	mov	r28, r24
	twi_start();
     41c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     420:	80 ed       	ldi	r24, 0xD0	; 208
     422:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_YEAR);
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(((year/10) <<  DS3232_BV_YEAR_10) | (year % 10));
     42c:	8d ec       	ldi	r24, 0xCD	; 205
     42e:	c8 9f       	mul	r28, r24
     430:	81 2d       	mov	r24, r1
     432:	11 24       	eor	r1, r1
     434:	86 95       	lsr	r24
     436:	86 95       	lsr	r24
     438:	86 95       	lsr	r24
     43a:	90 e1       	ldi	r25, 0x10	; 16
     43c:	89 9f       	mul	r24, r25
     43e:	90 01       	movw	r18, r0
     440:	11 24       	eor	r1, r1
     442:	88 0f       	add	r24, r24
     444:	98 2f       	mov	r25, r24
     446:	99 0f       	add	r25, r25
     448:	99 0f       	add	r25, r25
     44a:	89 0f       	add	r24, r25
     44c:	c8 1b       	sub	r28, r24
     44e:	8c 2f       	mov	r24, r28
     450:	82 2b       	or	r24, r18
     452:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     456:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <get_mode_12_24>:
		}
	}
}

uint8_t get_mode_12_24(void)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	28 97       	sbiw	r28, 0x08	; 8
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
	uint8_t time_bcd[6];
	uint8_t time_ampm;
	uint8_t time_mode_12_24;
	get_time_bcd(time_bcd, &time_ampm, &time_mode_12_24);
     472:	ae 01       	movw	r20, r28
     474:	48 5f       	subi	r20, 0xF8	; 248
     476:	5f 4f       	sbci	r21, 0xFF	; 255
     478:	be 01       	movw	r22, r28
     47a:	69 5f       	subi	r22, 0xF9	; 249
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
	return time_mode_12_24;
}
     486:	88 85       	ldd	r24, Y+8	; 0x08
     488:	28 96       	adiw	r28, 0x08	; 8
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <get_alarm1_time>:

void get_alarm1_time(uint8_t alarm1_bcd[], uint8_t* ampm, uint8_t* mode_12_24)
{
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	ec 01       	movw	r28, r24
     4ae:	8b 01       	movw	r16, r22
     4b0:	7a 01       	movw	r14, r20
	twi_start();
     4b2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     4b6:	80 ed       	ldi	r24, 0xD0	; 208
     4b8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_ALARM1_SEC);
     4bc:	87 e0       	ldi	r24, 0x07	; 7
     4be:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     4c2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     4c6:	81 ed       	ldi	r24, 0xD1	; 209
     4c8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t seconds_bcd = twi_recieve_byte_ack();
     4cc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     4d0:	c8 2e       	mov	r12, r24
	uint8_t minutes_bcd = twi_recieve_byte_ack();
     4d2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     4d6:	b8 2e       	mov	r11, r24
	uint8_t hours_bcd = twi_recieve_byte_noack();
     4d8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     4dc:	d8 2e       	mov	r13, r24
	twi_stop();
     4de:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	//Set the hours 10's place
	if(hours_bcd & (1 << DS3232_BV_HOURS_12_24))
     4e2:	d6 fe       	sbrs	r13, 6
     4e4:	12 c0       	rjmp	.+36     	; 0x50a <get_alarm1_time+0x70>
	{
		alarm1_bcd[0] = (hours_bcd & ((1 << DS3232_BV_HOURS_AM_PM_20) | (1 << DS3232_BV_HOURS_10))) >> DS3232_BV_HOURS_10;
     4e6:	2d 2d       	mov	r18, r13
     4e8:	20 73       	andi	r18, 0x30	; 48
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	35 95       	asr	r19
     4ee:	27 95       	ror	r18
     4f0:	35 95       	asr	r19
     4f2:	27 95       	ror	r18
     4f4:	35 95       	asr	r19
     4f6:	27 95       	ror	r18
     4f8:	35 95       	asr	r19
     4fa:	27 95       	ror	r18
     4fc:	28 83       	st	Y, r18
		*mode_12_24 = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	f7 01       	movw	r30, r14
     502:	80 83       	st	Z, r24
		*ampm = 0;
     504:	f8 01       	movw	r30, r16
     506:	10 82       	st	Z, r1
     508:	09 c0       	rjmp	.+18     	; 0x51c <get_alarm1_time+0x82>
	}
	else
	{
		alarm1_bcd[0] = (hours_bcd & (1 << DS3232_BV_HOURS_10));
     50a:	8d 2d       	mov	r24, r13
     50c:	80 71       	andi	r24, 0x10	; 16
     50e:	88 83       	st	Y, r24
		*mode_12_24 = 0;
     510:	f7 01       	movw	r30, r14
     512:	10 82       	st	Z, r1
		*ampm = (hours_bcd & (1 << DS3232_BV_HOURS_AM_PM_20));
     514:	8d 2d       	mov	r24, r13
     516:	80 72       	andi	r24, 0x20	; 32
     518:	f8 01       	movw	r30, r16
     51a:	80 83       	st	Z, r24
	}
	//Set the hours 1's place
	alarm1_bcd[1] = hours_bcd % 16;
     51c:	8d 2d       	mov	r24, r13
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	89 83       	std	Y+1, r24	; 0x01
	
	//Set the minutes 10's place
	alarm1_bcd[2] = minutes_bcd >> DS3232_BV_MINUTES_10;
     522:	8b 2d       	mov	r24, r11
     524:	82 95       	swap	r24
     526:	8f 70       	andi	r24, 0x0F	; 15
     528:	8a 83       	std	Y+2, r24	; 0x02
	//Set the minutes 1's place
	alarm1_bcd[3] = minutes_bcd % 16;
     52a:	8b 2d       	mov	r24, r11
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	8b 83       	std	Y+3, r24	; 0x03
	
	//Set the seconds 10's place
	alarm1_bcd[4] = seconds_bcd >> DS3232_BV_SECONDS_10;
     530:	8c 2d       	mov	r24, r12
     532:	82 95       	swap	r24
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	8c 83       	std	Y+4, r24	; 0x04
	//Set the seconds 1's place
	alarm1_bcd[5] = seconds_bcd % 16;
     538:	8c 2d       	mov	r24, r12
     53a:	8f 70       	andi	r24, 0x0F	; 15
     53c:	8d 83       	std	Y+5, r24	; 0x05
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	08 95       	ret

00000552 <get_alarm2_time>:

void get_alarm2_time(uint8_t alarm2_bcd[], uint8_t* ampm, uint8_t* mode_12_24)
{
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	8b 01       	movw	r16, r22
     566:	7a 01       	movw	r14, r20
	twi_start();
     568:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     56c:	80 ed       	ldi	r24, 0xD0	; 208
     56e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_ALARM2_MIN);
     572:	8b e0       	ldi	r24, 0x0B	; 11
     574:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     578:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     57c:	81 ed       	ldi	r24, 0xD1	; 209
     57e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t minutes_bcd = twi_recieve_byte_ack();
     582:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <twi_recieve_byte_ack>
     586:	c8 2e       	mov	r12, r24
	uint8_t hours_bcd = twi_recieve_byte_noack();
     588:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     58c:	d8 2e       	mov	r13, r24
	twi_stop();
     58e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	//Set the hours 10's place
	if(hours_bcd & (1 << DS3232_BV_HOURS_12_24))
     592:	d6 fe       	sbrs	r13, 6
     594:	12 c0       	rjmp	.+36     	; 0x5ba <get_alarm2_time+0x68>
	{
		alarm2_bcd[0] = (hours_bcd & ((1 << DS3232_BV_HOURS_AM_PM_20) | (1 << DS3232_BV_HOURS_10))) >> DS3232_BV_HOURS_10;
     596:	2d 2d       	mov	r18, r13
     598:	20 73       	andi	r18, 0x30	; 48
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	35 95       	asr	r19
     59e:	27 95       	ror	r18
     5a0:	35 95       	asr	r19
     5a2:	27 95       	ror	r18
     5a4:	35 95       	asr	r19
     5a6:	27 95       	ror	r18
     5a8:	35 95       	asr	r19
     5aa:	27 95       	ror	r18
     5ac:	28 83       	st	Y, r18
		*mode_12_24 = 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	f7 01       	movw	r30, r14
     5b2:	80 83       	st	Z, r24
		*ampm = 0;
     5b4:	f8 01       	movw	r30, r16
     5b6:	10 82       	st	Z, r1
     5b8:	09 c0       	rjmp	.+18     	; 0x5cc <get_alarm2_time+0x7a>
	}
	else
	{
		alarm2_bcd[0] = (hours_bcd & (1 << DS3232_BV_HOURS_10));
     5ba:	8d 2d       	mov	r24, r13
     5bc:	80 71       	andi	r24, 0x10	; 16
     5be:	88 83       	st	Y, r24
		*mode_12_24 = 0;
     5c0:	f7 01       	movw	r30, r14
     5c2:	10 82       	st	Z, r1
		*ampm = (hours_bcd & (1 << DS3232_BV_HOURS_AM_PM_20));
     5c4:	8d 2d       	mov	r24, r13
     5c6:	80 72       	andi	r24, 0x20	; 32
     5c8:	f8 01       	movw	r30, r16
     5ca:	80 83       	st	Z, r24
	}
	//Set the hours 1's place
	alarm2_bcd[1] = hours_bcd % 16;
     5cc:	8d 2d       	mov	r24, r13
     5ce:	8f 70       	andi	r24, 0x0F	; 15
     5d0:	89 83       	std	Y+1, r24	; 0x01
	
	//Set the minutes 10's place
	alarm2_bcd[2] = minutes_bcd >> DS3232_BV_MINUTES_10;
     5d2:	8c 2d       	mov	r24, r12
     5d4:	82 95       	swap	r24
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	8a 83       	std	Y+2, r24	; 0x02
	//Set the minutes 1's place
	alarm2_bcd[3] = minutes_bcd % 16;
     5da:	8c 2d       	mov	r24, r12
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	8b 83       	std	Y+3, r24	; 0x03
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	08 95       	ret

000005f2 <set_all_mode_12_24>:
	twi_send_byte(((year/10) <<  DS3232_BV_YEAR_10) | (year % 10));
	twi_stop();
}

void set_all_mode_12_24(uint8_t mode)
{
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	66 97       	sbiw	r28, 0x16	; 22
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	18 2f       	mov	r17, r24
	uint8_t time_bcd[6];
	uint8_t time_ampm;
	uint8_t time_mode_12_24;
	get_time_bcd(time_bcd, &time_ampm, &time_mode_12_24);
     60a:	ae 01       	movw	r20, r28
     60c:	48 5f       	subi	r20, 0xF8	; 248
     60e:	5f 4f       	sbci	r21, 0xFF	; 255
     610:	be 01       	movw	r22, r28
     612:	69 5f       	subi	r22, 0xF9	; 249
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
	
	uint8_t alarm1_bcd[6];
	uint8_t alarm1_ampm;
	uint8_t alarm1_mode_12_24;
	get_alarm1_time(alarm1_bcd, &alarm1_ampm, &alarm1_mode_12_24);
     61e:	ae 01       	movw	r20, r28
     620:	40 5f       	subi	r20, 0xF0	; 240
     622:	5f 4f       	sbci	r21, 0xFF	; 255
     624:	be 01       	movw	r22, r28
     626:	61 5f       	subi	r22, 0xF1	; 241
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	ce 01       	movw	r24, r28
     62c:	09 96       	adiw	r24, 0x09	; 9
     62e:	0e 94 4d 02 	call	0x49a	; 0x49a <get_alarm1_time>
	
	uint8_t alarm2_bcd[4];
	uint8_t alarm2_ampm;
	uint8_t alarm2_mode_12_24;
	get_alarm2_time(alarm2_bcd, &alarm2_ampm, &alarm2_mode_12_24);
     632:	ae 01       	movw	r20, r28
     634:	4a 5e       	subi	r20, 0xEA	; 234
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	be 01       	movw	r22, r28
     63a:	6b 5e       	subi	r22, 0xEB	; 235
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	ce 01       	movw	r24, r28
     640:	41 96       	adiw	r24, 0x11	; 17
     642:	0e 94 a9 02 	call	0x552	; 0x552 <get_alarm2_time>
	
	uint8_t hours;
	
	if(mode)
     646:	11 23       	and	r17, r17
     648:	09 f4       	brne	.+2      	; 0x64c <set_all_mode_12_24+0x5a>
     64a:	0c c1       	rjmp	.+536    	; 0x864 <set_all_mode_12_24+0x272>
	{
		if(!time_mode_12_24)
     64c:	88 85       	ldd	r24, Y+8	; 0x08
     64e:	81 11       	cpse	r24, r1
     650:	36 c2       	rjmp	.+1132   	; 0xabe <__stack+0x1bf>
		{
			if((time_bcd[0]*10+time_bcd[1]) > 12)
     652:	99 81       	ldd	r25, Y+1	; 0x01
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	29 2f       	mov	r18, r25
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	44 0f       	add	r20, r20
     65e:	55 1f       	adc	r21, r21
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	24 0f       	add	r18, r20
     66e:	35 1f       	adc	r19, r21
     670:	28 0f       	add	r18, r24
     672:	31 1d       	adc	r19, r1
     674:	2d 30       	cpi	r18, 0x0D	; 13
     676:	31 05       	cpc	r19, r1
     678:	bc f0       	brlt	.+46     	; 0x6a8 <set_all_mode_12_24+0xb6>
			{
				hours = time_bcd[0]*10 + time_bcd[1] - 12;
     67a:	8c 50       	subi	r24, 0x0C	; 12
     67c:	99 0f       	add	r25, r25
     67e:	19 2f       	mov	r17, r25
     680:	11 0f       	add	r17, r17
     682:	11 0f       	add	r17, r17
     684:	91 0f       	add	r25, r17
     686:	18 2f       	mov	r17, r24
     688:	19 0f       	add	r17, r25
				twi_start();
     68a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     68e:	80 ed       	ldi	r24, 0xD0	; 208
     690:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_HOURS);
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | (1 << DS3232_BV_HOURS_AM_PM_20) | hours);
     69a:	81 2f       	mov	r24, r17
     69c:	80 66       	ori	r24, 0x60	; 96
     69e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     6a2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     6a6:	2d c0       	rjmp	.+90     	; 0x702 <set_all_mode_12_24+0x110>
			}
			else if((time_bcd[0] == 0) & (time_bcd[1] == 0))
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	81 11       	cpse	r24, r1
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	22 23       	and	r18, r18
     6b0:	99 f0       	breq	.+38     	; 0x6d8 <set_all_mode_12_24+0xe6>
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	91 11       	cpse	r25, r1
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	22 23       	and	r18, r18
     6ba:	71 f0       	breq	.+28     	; 0x6d8 <set_all_mode_12_24+0xe6>
			{
				hours = 12;
				twi_start();
     6bc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     6c0:	80 ed       	ldi	r24, 0xD0	; 208
     6c2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_HOURS);
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | hours);
     6cc:	8c e4       	ldi	r24, 0x4C	; 76
     6ce:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     6d2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     6d6:	15 c0       	rjmp	.+42     	; 0x702 <set_all_mode_12_24+0x110>
			}
			else
			{
				hours = time_bcd[0]*10 + time_bcd[1];				
     6d8:	99 0f       	add	r25, r25
     6da:	19 2f       	mov	r17, r25
     6dc:	11 0f       	add	r17, r17
     6de:	11 0f       	add	r17, r17
     6e0:	91 0f       	add	r25, r17
     6e2:	19 2f       	mov	r17, r25
     6e4:	18 0f       	add	r17, r24
				twi_start();
     6e6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     6ea:	80 ed       	ldi	r24, 0xD0	; 208
     6ec:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_HOURS);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | hours);
     6f6:	81 2f       	mov	r24, r17
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     6fe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
			}
			
			if((alarm1_bcd[0]*10+alarm1_bcd[1]) > 12)
     702:	99 85       	ldd	r25, Y+9	; 0x09
     704:	8a 85       	ldd	r24, Y+10	; 0x0a
     706:	29 2f       	mov	r18, r25
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	a9 01       	movw	r20, r18
     70c:	44 0f       	add	r20, r20
     70e:	55 1f       	adc	r21, r21
     710:	22 0f       	add	r18, r18
     712:	33 1f       	adc	r19, r19
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	22 0f       	add	r18, r18
     71a:	33 1f       	adc	r19, r19
     71c:	24 0f       	add	r18, r20
     71e:	35 1f       	adc	r19, r21
     720:	28 0f       	add	r18, r24
     722:	31 1d       	adc	r19, r1
     724:	2d 30       	cpi	r18, 0x0D	; 13
     726:	31 05       	cpc	r19, r1
     728:	bc f0       	brlt	.+46     	; 0x758 <set_all_mode_12_24+0x166>
			{
				hours = alarm1_bcd[0]*10 + alarm1_bcd[1] - 12;
     72a:	8c 50       	subi	r24, 0x0C	; 12
     72c:	99 0f       	add	r25, r25
     72e:	19 2f       	mov	r17, r25
     730:	11 0f       	add	r17, r17
     732:	11 0f       	add	r17, r17
     734:	91 0f       	add	r25, r17
     736:	18 2f       	mov	r17, r24
     738:	19 0f       	add	r17, r25
				twi_start();
     73a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     73e:	80 ed       	ldi	r24, 0xD0	; 208
     740:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     744:	89 e0       	ldi	r24, 0x09	; 9
     746:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | (1 << DS3232_BV_HOURS_AM_PM_20) | hours);
     74a:	81 2f       	mov	r24, r17
     74c:	80 66       	ori	r24, 0x60	; 96
     74e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     752:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     756:	2d c0       	rjmp	.+90     	; 0x7b2 <set_all_mode_12_24+0x1c0>
			}
			else if((alarm1_bcd[0] == 0) & (alarm1_bcd[1] == 0))
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	81 11       	cpse	r24, r1
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	22 23       	and	r18, r18
     760:	99 f0       	breq	.+38     	; 0x788 <set_all_mode_12_24+0x196>
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	91 11       	cpse	r25, r1
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	22 23       	and	r18, r18
     76a:	71 f0       	breq	.+28     	; 0x788 <set_all_mode_12_24+0x196>
			{
				hours = 12;
				twi_start();
     76c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     770:	80 ed       	ldi	r24, 0xD0	; 208
     772:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     776:	89 e0       	ldi	r24, 0x09	; 9
     778:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | hours);
     77c:	8c e4       	ldi	r24, 0x4C	; 76
     77e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();			
     782:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     786:	15 c0       	rjmp	.+42     	; 0x7b2 <set_all_mode_12_24+0x1c0>
			}
			else
			{
				hours = alarm1_bcd[0]*10 + alarm1_bcd[1];
     788:	99 0f       	add	r25, r25
     78a:	19 2f       	mov	r17, r25
     78c:	11 0f       	add	r17, r17
     78e:	11 0f       	add	r17, r17
     790:	91 0f       	add	r25, r17
     792:	19 2f       	mov	r17, r25
     794:	18 0f       	add	r17, r24
				twi_start();
     796:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     79a:	80 ed       	ldi	r24, 0xD0	; 208
     79c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     7a0:	89 e0       	ldi	r24, 0x09	; 9
     7a2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | hours);
     7a6:	81 2f       	mov	r24, r17
     7a8:	80 64       	ori	r24, 0x40	; 64
     7aa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     7ae:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
			}

			
			if((alarm2_bcd[0]*10+alarm2_bcd[1]) > 12)
     7b2:	99 89       	ldd	r25, Y+17	; 0x11
     7b4:	8a 89       	ldd	r24, Y+18	; 0x12
     7b6:	29 2f       	mov	r18, r25
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	a9 01       	movw	r20, r18
     7bc:	44 0f       	add	r20, r20
     7be:	55 1f       	adc	r21, r21
     7c0:	22 0f       	add	r18, r18
     7c2:	33 1f       	adc	r19, r19
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
     7c8:	22 0f       	add	r18, r18
     7ca:	33 1f       	adc	r19, r19
     7cc:	24 0f       	add	r18, r20
     7ce:	35 1f       	adc	r19, r21
     7d0:	28 0f       	add	r18, r24
     7d2:	31 1d       	adc	r19, r1
     7d4:	2d 30       	cpi	r18, 0x0D	; 13
     7d6:	31 05       	cpc	r19, r1
     7d8:	bc f0       	brlt	.+46     	; 0x808 <set_all_mode_12_24+0x216>
			{
				hours = alarm2_bcd[0]*10 + alarm2_bcd[1] - 12;
     7da:	8c 50       	subi	r24, 0x0C	; 12
     7dc:	99 0f       	add	r25, r25
     7de:	19 2f       	mov	r17, r25
     7e0:	11 0f       	add	r17, r17
     7e2:	11 0f       	add	r17, r17
     7e4:	91 0f       	add	r25, r17
     7e6:	18 2f       	mov	r17, r24
     7e8:	19 0f       	add	r17, r25
				twi_start();
     7ea:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     7ee:	80 ed       	ldi	r24, 0xD0	; 208
     7f0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM2_HOUR);
     7f4:	8c e0       	ldi	r24, 0x0C	; 12
     7f6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | (1 << DS3232_BV_HOURS_AM_PM_20) | hours);
     7fa:	81 2f       	mov	r24, r17
     7fc:	80 66       	ori	r24, 0x60	; 96
     7fe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     802:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     806:	5b c1       	rjmp	.+694    	; 0xabe <__stack+0x1bf>
			}
			else if((alarm2_bcd[0] == 0) & (alarm2_bcd[1] == 0))
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	81 11       	cpse	r24, r1
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	22 23       	and	r18, r18
     810:	99 f0       	breq	.+38     	; 0x838 <set_all_mode_12_24+0x246>
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	91 11       	cpse	r25, r1
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	22 23       	and	r18, r18
     81a:	71 f0       	breq	.+28     	; 0x838 <set_all_mode_12_24+0x246>
			{
				hours = 12;
				twi_start();
     81c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     820:	80 ed       	ldi	r24, 0xD0	; 208
     822:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM2_HOUR);
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | hours);
     82c:	8c e4       	ldi	r24, 0x4C	; 76
     82e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     832:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     836:	43 c1       	rjmp	.+646    	; 0xabe <__stack+0x1bf>
			}
			else
			{
				hours = alarm2_bcd[0]*10 + alarm2_bcd[1];
     838:	99 0f       	add	r25, r25
     83a:	19 2f       	mov	r17, r25
     83c:	11 0f       	add	r17, r17
     83e:	11 0f       	add	r17, r17
     840:	91 0f       	add	r25, r17
     842:	19 2f       	mov	r17, r25
     844:	18 0f       	add	r17, r24
				twi_start();
     846:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     84a:	80 ed       	ldi	r24, 0xD0	; 208
     84c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     850:	89 e0       	ldi	r24, 0x09	; 9
     852:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte((1 << DS3232_BV_HOURS_12_24) | hours);
     856:	81 2f       	mov	r24, r17
     858:	80 64       	ori	r24, 0x40	; 64
     85a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     85e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     862:	2d c1       	rjmp	.+602    	; 0xabe <__stack+0x1bf>
			}
		}
	}
	else
	{
		if(time_mode_12_24)
     864:	88 85       	ldd	r24, Y+8	; 0x08
     866:	88 23       	and	r24, r24
     868:	09 f4       	brne	.+2      	; 0x86c <set_all_mode_12_24+0x27a>
     86a:	29 c1       	rjmp	.+594    	; 0xabe <__stack+0x1bf>
		{
			if(time_ampm & ((time_bcd[0]*10+time_bcd[1]) != 12))
     86c:	ef 81       	ldd	r30, Y+7	; 0x07
     86e:	99 81       	ldd	r25, Y+1	; 0x01
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	29 2f       	mov	r18, r25
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	a9 01       	movw	r20, r18
     878:	44 0f       	add	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	24 0f       	add	r18, r20
     88a:	35 1f       	adc	r19, r21
     88c:	28 0f       	add	r18, r24
     88e:	31 1d       	adc	r19, r1
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	2c 30       	cpi	r18, 0x0C	; 12
     896:	31 05       	cpc	r19, r1
     898:	11 f4       	brne	.+4      	; 0x89e <set_all_mode_12_24+0x2ac>
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	6e 2f       	mov	r22, r30
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	46 23       	and	r20, r22
     8a4:	57 23       	and	r21, r23
     8a6:	45 2b       	or	r20, r21
     8a8:	b1 f0       	breq	.+44     	; 0x8d6 <set_all_mode_12_24+0x2e4>
			{
				hours = time_bcd[0]*10+time_bcd[1] + 12;
     8aa:	84 5f       	subi	r24, 0xF4	; 244
     8ac:	99 0f       	add	r25, r25
     8ae:	19 2f       	mov	r17, r25
     8b0:	11 0f       	add	r17, r17
     8b2:	11 0f       	add	r17, r17
     8b4:	91 0f       	add	r25, r17
     8b6:	18 2f       	mov	r17, r24
     8b8:	19 0f       	add	r17, r25
				twi_start();
     8ba:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     8be:	80 ed       	ldi	r24, 0xD0	; 208
     8c0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_HOURS);
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     8ca:	81 2f       	mov	r24, r17
     8cc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();				
     8d0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     8d4:	2e c0       	rjmp	.+92     	; 0x932 <__stack+0x33>
			}
			else if(!time_ampm & ((time_bcd[0]*10+time_bcd[1]) == 12))
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	2c 30       	cpi	r18, 0x0C	; 12
     8da:	31 05       	cpc	r19, r1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <set_all_mode_12_24+0x2ee>
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	44 23       	and	r20, r20
     8e2:	99 f0       	breq	.+38     	; 0x90a <__stack+0xb>
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	e1 11       	cpse	r30, r1
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	22 23       	and	r18, r18
     8ec:	71 f0       	breq	.+28     	; 0x90a <__stack+0xb>
			{
				hours = 0;
				twi_start();
     8ee:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     8f2:	80 ed       	ldi	r24, 0xD0	; 208
     8f4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_HOURS);
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();				
     904:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     908:	14 c0       	rjmp	.+40     	; 0x932 <__stack+0x33>
			}
			else
			{
				hours = time_bcd[0]*10+time_bcd[1];
     90a:	99 0f       	add	r25, r25
     90c:	19 2f       	mov	r17, r25
     90e:	11 0f       	add	r17, r17
     910:	11 0f       	add	r17, r17
     912:	91 0f       	add	r25, r17
     914:	19 2f       	mov	r17, r25
     916:	18 0f       	add	r17, r24
				twi_start();
     918:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     91c:	80 ed       	ldi	r24, 0xD0	; 208
     91e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_HOURS);
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     928:	81 2f       	mov	r24, r17
     92a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     92e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
			}
			
			if(alarm1_ampm & ((alarm1_bcd[0]*10+alarm1_bcd[1]) != 12))
     932:	ef 85       	ldd	r30, Y+15	; 0x0f
     934:	99 85       	ldd	r25, Y+9	; 0x09
     936:	8a 85       	ldd	r24, Y+10	; 0x0a
     938:	29 2f       	mov	r18, r25
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	a9 01       	movw	r20, r18
     93e:	44 0f       	add	r20, r20
     940:	55 1f       	adc	r21, r21
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	24 0f       	add	r18, r20
     950:	35 1f       	adc	r19, r21
     952:	28 0f       	add	r18, r24
     954:	31 1d       	adc	r19, r1
     956:	41 e0       	ldi	r20, 0x01	; 1
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	2c 30       	cpi	r18, 0x0C	; 12
     95c:	31 05       	cpc	r19, r1
     95e:	11 f4       	brne	.+4      	; 0x964 <__stack+0x65>
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	6e 2f       	mov	r22, r30
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	46 23       	and	r20, r22
     96a:	57 23       	and	r21, r23
     96c:	45 2b       	or	r20, r21
     96e:	b1 f0       	breq	.+44     	; 0x99c <__stack+0x9d>
			{
				hours = alarm1_bcd[0]*10+alarm1_bcd[1] + 12;
     970:	84 5f       	subi	r24, 0xF4	; 244
     972:	99 0f       	add	r25, r25
     974:	19 2f       	mov	r17, r25
     976:	11 0f       	add	r17, r17
     978:	11 0f       	add	r17, r17
     97a:	91 0f       	add	r25, r17
     97c:	18 2f       	mov	r17, r24
     97e:	19 0f       	add	r17, r25
				twi_start();
     980:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     984:	80 ed       	ldi	r24, 0xD0	; 208
     986:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     98a:	89 e0       	ldi	r24, 0x09	; 9
     98c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     990:	81 2f       	mov	r24, r17
     992:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     996:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     99a:	2e c0       	rjmp	.+92     	; 0x9f8 <__stack+0xf9>
			}
			else if(!alarm1_ampm & ((alarm1_bcd[0]*10+alarm1_bcd[1]) == 12))
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	2c 30       	cpi	r18, 0x0C	; 12
     9a0:	31 05       	cpc	r19, r1
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	44 23       	and	r20, r20
     9a8:	99 f0       	breq	.+38     	; 0x9d0 <__stack+0xd1>
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	e1 11       	cpse	r30, r1
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	22 23       	and	r18, r18
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <__stack+0xd1>
			{
				hours = 0;
				twi_start();
     9b4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     9b8:	80 ed       	ldi	r24, 0xD0	; 208
     9ba:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     9be:	89 e0       	ldi	r24, 0x09	; 9
     9c0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     9ca:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <__stack+0xf9>
			}
			else
			{
				hours = alarm1_bcd[0]*10+alarm1_bcd[1];
     9d0:	99 0f       	add	r25, r25
     9d2:	19 2f       	mov	r17, r25
     9d4:	11 0f       	add	r17, r17
     9d6:	11 0f       	add	r17, r17
     9d8:	91 0f       	add	r25, r17
     9da:	19 2f       	mov	r17, r25
     9dc:	18 0f       	add	r17, r24
				twi_start();
     9de:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     9e2:	80 ed       	ldi	r24, 0xD0	; 208
     9e4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     9e8:	89 e0       	ldi	r24, 0x09	; 9
     9ea:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     9ee:	81 2f       	mov	r24, r17
     9f0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     9f4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
			}
			
			if(alarm2_ampm & ((alarm2_bcd[0]*10+alarm2_bcd[1]) != 12))
     9f8:	ed 89       	ldd	r30, Y+21	; 0x15
     9fa:	99 89       	ldd	r25, Y+17	; 0x11
     9fc:	8a 89       	ldd	r24, Y+18	; 0x12
     9fe:	29 2f       	mov	r18, r25
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	a9 01       	movw	r20, r18
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	22 0f       	add	r18, r18
     a12:	33 1f       	adc	r19, r19
     a14:	24 0f       	add	r18, r20
     a16:	35 1f       	adc	r19, r21
     a18:	28 0f       	add	r18, r24
     a1a:	31 1d       	adc	r19, r1
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	2c 30       	cpi	r18, 0x0C	; 12
     a22:	31 05       	cpc	r19, r1
     a24:	11 f4       	brne	.+4      	; 0xa2a <__stack+0x12b>
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	6e 2f       	mov	r22, r30
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	46 23       	and	r20, r22
     a30:	57 23       	and	r21, r23
     a32:	45 2b       	or	r20, r21
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__stack+0x163>
			{
				hours = alarm2_bcd[0]*10+alarm2_bcd[1] + 12;
     a36:	84 5f       	subi	r24, 0xF4	; 244
     a38:	99 0f       	add	r25, r25
     a3a:	19 2f       	mov	r17, r25
     a3c:	11 0f       	add	r17, r17
     a3e:	11 0f       	add	r17, r17
     a40:	91 0f       	add	r25, r17
     a42:	18 2f       	mov	r17, r24
     a44:	19 0f       	add	r17, r25
				twi_start();
     a46:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     a4a:	80 ed       	ldi	r24, 0xD0	; 208
     a4c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM2_HOUR);
     a50:	8c e0       	ldi	r24, 0x0C	; 12
     a52:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     a56:	81 2f       	mov	r24, r17
     a58:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     a5c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     a60:	2e c0       	rjmp	.+92     	; 0xabe <__stack+0x1bf>
			}
			else if(!alarm2_ampm & ((alarm2_bcd[0]*10+alarm2_bcd[1]) == 12))
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	2c 30       	cpi	r18, 0x0C	; 12
     a66:	31 05       	cpc	r19, r1
     a68:	09 f0       	breq	.+2      	; 0xa6c <__stack+0x16d>
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	44 23       	and	r20, r20
     a6e:	99 f0       	breq	.+38     	; 0xa96 <__stack+0x197>
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	e1 11       	cpse	r30, r1
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	22 23       	and	r18, r18
     a78:	71 f0       	breq	.+28     	; 0xa96 <__stack+0x197>
			{
				hours = 0;
				twi_start();
     a7a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     a7e:	80 ed       	ldi	r24, 0xD0	; 208
     a80:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM2_HOUR);
     a84:	8c e0       	ldi	r24, 0x0C	; 12
     a86:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     a90:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
     a94:	14 c0       	rjmp	.+40     	; 0xabe <__stack+0x1bf>
			}
			else
			{
				hours = alarm2_bcd[0]*10+alarm2_bcd[1];
     a96:	99 0f       	add	r25, r25
     a98:	19 2f       	mov	r17, r25
     a9a:	11 0f       	add	r17, r17
     a9c:	11 0f       	add	r17, r17
     a9e:	91 0f       	add	r25, r17
     aa0:	19 2f       	mov	r17, r25
     aa2:	18 0f       	add	r17, r24
				twi_start();
     aa4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
				twi_send_byte(DS3232_ADDRESS_W);
     aa8:	80 ed       	ldi	r24, 0xD0	; 208
     aaa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(DS3232_PTR_ALARM2_HOUR);
     aae:	8c e0       	ldi	r24, 0x0C	; 12
     ab0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_send_byte(hours);
     ab4:	81 2f       	mov	r24, r17
     ab6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
				twi_stop();
     aba:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
			}
		}
	}
}
     abe:	66 96       	adiw	r28, 0x16	; 22
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	08 95       	ret

00000ad2 <set_alarm1_time>:
	//Set the minutes 1's place
	alarm2_bcd[3] = minutes_bcd % 16;
}

void set_alarm1_time(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t ampm)
{
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	c8 2f       	mov	r28, r24
     ae0:	d6 2f       	mov	r29, r22
     ae2:	04 2f       	mov	r16, r20
     ae4:	e2 2e       	mov	r14, r18
	twi_start();
     ae6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     aea:	80 ed       	ldi	r24, 0xD0	; 208
     aec:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_ALARM1_HOUR);
     af0:	89 e0       	ldi	r24, 0x09	; 9
     af2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     af6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     afa:	81 ed       	ldi	r24, 0xD1	; 209
     afc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t current = twi_recieve_byte_noack();
     b00:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     b04:	f8 2e       	mov	r15, r24
	twi_stop();
     b06:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	twi_start();
     b0a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     b0e:	80 ed       	ldi	r24, 0xD0	; 208
     b10:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_ALARM1_SEC);
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(((seconds/10) << DS3232_BV_SECONDS_10) | (seconds%10));
     b1a:	1d ec       	ldi	r17, 0xCD	; 205
     b1c:	01 9f       	mul	r16, r17
     b1e:	91 2d       	mov	r25, r1
     b20:	11 24       	eor	r1, r1
     b22:	96 95       	lsr	r25
     b24:	96 95       	lsr	r25
     b26:	96 95       	lsr	r25
     b28:	30 e1       	ldi	r19, 0x10	; 16
     b2a:	93 9f       	mul	r25, r19
     b2c:	f0 01       	movw	r30, r0
     b2e:	11 24       	eor	r1, r1
     b30:	99 0f       	add	r25, r25
     b32:	89 2f       	mov	r24, r25
     b34:	88 0f       	add	r24, r24
     b36:	88 0f       	add	r24, r24
     b38:	98 0f       	add	r25, r24
     b3a:	80 2f       	mov	r24, r16
     b3c:	89 1b       	sub	r24, r25
     b3e:	8e 2b       	or	r24, r30
     b40:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes%10));
     b44:	d1 9f       	mul	r29, r17
     b46:	11 2d       	mov	r17, r1
     b48:	11 24       	eor	r1, r1
     b4a:	16 95       	lsr	r17
     b4c:	16 95       	lsr	r17
     b4e:	16 95       	lsr	r17
     b50:	80 e1       	ldi	r24, 0x10	; 16
     b52:	18 9f       	mul	r17, r24
     b54:	a0 01       	movw	r20, r0
     b56:	11 24       	eor	r1, r1
     b58:	11 0f       	add	r17, r17
     b5a:	81 2f       	mov	r24, r17
     b5c:	88 0f       	add	r24, r24
     b5e:	88 0f       	add	r24, r24
     b60:	18 0f       	add	r17, r24
     b62:	8d 2f       	mov	r24, r29
     b64:	81 1b       	sub	r24, r17
     b66:	84 2b       	or	r24, r20
     b68:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	if(current & (1 << DS3232_BV_HOURS_12_24))
     b6c:	f6 fe       	sbrs	r15, 6
     b6e:	1c c0       	rjmp	.+56     	; 0xba8 <set_alarm1_time+0xd6>
	{
		twi_send_byte((1 << DS3232_BV_HOURS_12_24) | 
     b70:	4d ec       	ldi	r20, 0xCD	; 205
     b72:	c4 9f       	mul	r28, r20
     b74:	41 2d       	mov	r20, r1
     b76:	11 24       	eor	r1, r1
     b78:	46 95       	lsr	r20
     b7a:	46 95       	lsr	r20
     b7c:	46 95       	lsr	r20
     b7e:	84 2f       	mov	r24, r20
     b80:	88 0f       	add	r24, r24
     b82:	98 2f       	mov	r25, r24
     b84:	99 0f       	add	r25, r25
     b86:	99 0f       	add	r25, r25
     b88:	89 0f       	add	r24, r25
     b8a:	c8 1b       	sub	r28, r24
     b8c:	c0 64       	ori	r28, 0x40	; 64
					 (ampm << DS3232_BV_HOURS_AM_PM_20) | 
     b8e:	90 e2       	ldi	r25, 0x20	; 32
     b90:	e9 9e       	mul	r14, r25
     b92:	90 01       	movw	r18, r0
     b94:	11 24       	eor	r1, r1
	twi_send_byte(DS3232_PTR_ALARM1_SEC);
	twi_send_byte(((seconds/10) << DS3232_BV_SECONDS_10) | (seconds%10));
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes%10));
	if(current & (1 << DS3232_BV_HOURS_12_24))
	{
		twi_send_byte((1 << DS3232_BV_HOURS_12_24) | 
     b96:	2c 2b       	or	r18, r28
					 (ampm << DS3232_BV_HOURS_AM_PM_20) | 
					 ((hours/10) << DS3232_BV_HOURS_10) | 
     b98:	30 e1       	ldi	r19, 0x10	; 16
     b9a:	43 9f       	mul	r20, r19
     b9c:	c0 01       	movw	r24, r0
     b9e:	11 24       	eor	r1, r1
	twi_send_byte(DS3232_PTR_ALARM1_SEC);
	twi_send_byte(((seconds/10) << DS3232_BV_SECONDS_10) | (seconds%10));
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes%10));
	if(current & (1 << DS3232_BV_HOURS_12_24))
	{
		twi_send_byte((1 << DS3232_BV_HOURS_12_24) | 
     ba0:	82 2b       	or	r24, r18
     ba2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
     ba6:	15 c0       	rjmp	.+42     	; 0xbd2 <set_alarm1_time+0x100>
					 ((hours/10) << DS3232_BV_HOURS_10) | 
					 (hours%10));
	}
	else
	{
		twi_send_byte(((hours/10) << DS3232_BV_HOURS_10) |
     ba8:	8d ec       	ldi	r24, 0xCD	; 205
     baa:	c8 9f       	mul	r28, r24
     bac:	81 2d       	mov	r24, r1
     bae:	11 24       	eor	r1, r1
     bb0:	86 95       	lsr	r24
     bb2:	86 95       	lsr	r24
     bb4:	86 95       	lsr	r24
     bb6:	90 e1       	ldi	r25, 0x10	; 16
     bb8:	89 9f       	mul	r24, r25
     bba:	90 01       	movw	r18, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	88 0f       	add	r24, r24
     bc0:	98 2f       	mov	r25, r24
     bc2:	99 0f       	add	r25, r25
     bc4:	99 0f       	add	r25, r25
     bc6:	89 0f       	add	r24, r25
     bc8:	c8 1b       	sub	r28, r24
     bca:	8c 2f       	mov	r24, r28
     bcc:	82 2b       	or	r24, r18
     bce:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
						(hours%10));
	}
	twi_send_byte(1 << DS3232_BV_AM1M4);
     bd2:	80 e8       	ldi	r24, 0x80	; 128
     bd4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     bd8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	08 95       	ret

00000bea <set_alarm2_time>:

void set_alarm2_time(uint8_t hours, uint8_t minutes, uint8_t ampm)
{
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	c8 2f       	mov	r28, r24
     bf4:	d6 2f       	mov	r29, r22
     bf6:	04 2f       	mov	r16, r20
	twi_start();
     bf8:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     bfc:	80 ed       	ldi	r24, 0xD0	; 208
     bfe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_ALARM2_HOUR);
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     c08:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     c0c:	81 ed       	ldi	r24, 0xD1	; 209
     c0e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t current = twi_recieve_byte_noack();
     c12:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
     c16:	18 2f       	mov	r17, r24
	twi_stop();
     c18:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
	
	twi_start();
     c1c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     c20:	80 ed       	ldi	r24, 0xD0	; 208
     c22:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_ALARM2_MIN);
     c26:	8b e0       	ldi	r24, 0x0B	; 11
     c28:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes%10));
     c2c:	9d ec       	ldi	r25, 0xCD	; 205
     c2e:	d9 9f       	mul	r29, r25
     c30:	91 2d       	mov	r25, r1
     c32:	11 24       	eor	r1, r1
     c34:	96 95       	lsr	r25
     c36:	96 95       	lsr	r25
     c38:	96 95       	lsr	r25
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	98 9f       	mul	r25, r24
     c3e:	90 01       	movw	r18, r0
     c40:	11 24       	eor	r1, r1
     c42:	99 0f       	add	r25, r25
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	88 0f       	add	r24, r24
     c4a:	98 0f       	add	r25, r24
     c4c:	8d 2f       	mov	r24, r29
     c4e:	89 1b       	sub	r24, r25
     c50:	82 2b       	or	r24, r18
     c52:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	if(current & (1 << DS3232_BV_HOURS_12_24))
     c56:	16 ff       	sbrs	r17, 6
     c58:	1c c0       	rjmp	.+56     	; 0xc92 <set_alarm2_time+0xa8>
	{
		twi_send_byte((1 << DS3232_BV_HOURS_12_24) |
     c5a:	2d ec       	ldi	r18, 0xCD	; 205
     c5c:	c2 9f       	mul	r28, r18
     c5e:	21 2d       	mov	r18, r1
     c60:	11 24       	eor	r1, r1
     c62:	26 95       	lsr	r18
     c64:	26 95       	lsr	r18
     c66:	26 95       	lsr	r18
     c68:	82 2f       	mov	r24, r18
     c6a:	88 0f       	add	r24, r24
     c6c:	98 2f       	mov	r25, r24
     c6e:	99 0f       	add	r25, r25
     c70:	99 0f       	add	r25, r25
     c72:	89 0f       	add	r24, r25
     c74:	c8 1b       	sub	r28, r24
     c76:	c0 64       	ori	r28, 0x40	; 64
		(ampm << DS3232_BV_HOURS_AM_PM_20) |
     c78:	90 e2       	ldi	r25, 0x20	; 32
     c7a:	09 9f       	mul	r16, r25
     c7c:	a0 01       	movw	r20, r0
     c7e:	11 24       	eor	r1, r1
	twi_send_byte(DS3232_ADDRESS_W);
	twi_send_byte(DS3232_PTR_ALARM2_MIN);
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes%10));
	if(current & (1 << DS3232_BV_HOURS_12_24))
	{
		twi_send_byte((1 << DS3232_BV_HOURS_12_24) |
     c80:	4c 2b       	or	r20, r28
		(ampm << DS3232_BV_HOURS_AM_PM_20) |
		((hours/10) << DS3232_BV_HOURS_10) |
     c82:	30 e1       	ldi	r19, 0x10	; 16
     c84:	23 9f       	mul	r18, r19
     c86:	c0 01       	movw	r24, r0
     c88:	11 24       	eor	r1, r1
	twi_send_byte(DS3232_ADDRESS_W);
	twi_send_byte(DS3232_PTR_ALARM2_MIN);
	twi_send_byte(((minutes/10) << DS3232_BV_MINUTES_10) | (minutes%10));
	if(current & (1 << DS3232_BV_HOURS_12_24))
	{
		twi_send_byte((1 << DS3232_BV_HOURS_12_24) |
     c8a:	84 2b       	or	r24, r20
     c8c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
     c90:	15 c0       	rjmp	.+42     	; 0xcbc <set_alarm2_time+0xd2>
		((hours/10) << DS3232_BV_HOURS_10) |
		(hours%10));
	}
	else
	{
		twi_send_byte(((hours/10) << DS3232_BV_HOURS_10) |
     c92:	8d ec       	ldi	r24, 0xCD	; 205
     c94:	c8 9f       	mul	r28, r24
     c96:	81 2d       	mov	r24, r1
     c98:	11 24       	eor	r1, r1
     c9a:	86 95       	lsr	r24
     c9c:	86 95       	lsr	r24
     c9e:	86 95       	lsr	r24
     ca0:	90 e1       	ldi	r25, 0x10	; 16
     ca2:	89 9f       	mul	r24, r25
     ca4:	90 01       	movw	r18, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	88 0f       	add	r24, r24
     caa:	98 2f       	mov	r25, r24
     cac:	99 0f       	add	r25, r25
     cae:	99 0f       	add	r25, r25
     cb0:	89 0f       	add	r24, r25
     cb2:	c8 1b       	sub	r28, r24
     cb4:	8c 2f       	mov	r24, r28
     cb6:	82 2b       	or	r24, r18
     cb8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
		(hours%10));
	}
	twi_send_byte(1 << DS3232_BV_AM2M4);
     cbc:	80 e8       	ldi	r24, 0x80	; 128
     cbe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     cc2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <set_offset_adjust>:

void set_offset_adjust(uint8_t offset)
{
     cd0:	cf 93       	push	r28
     cd2:	c8 2f       	mov	r28, r24
	twi_start();
     cd4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     cd8:	80 ed       	ldi	r24, 0xD0	; 208
     cda:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_AGING_OFFSET);
     cde:	80 e1       	ldi	r24, 0x10	; 16
     ce0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(offset);
     ce4:	8c 2f       	mov	r24, r28
     ce6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_stop();
     cea:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <twi_stop>
}
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <get_offset_adjust>:

void get_offset_adjust(uint8_t* aging_offset)
{
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
	twi_start();
     cf8:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_W);
     cfc:	80 ed       	ldi	r24, 0xD0	; 208
     cfe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_send_byte(DS3232_PTR_AGING_OFFSET);
     d02:	80 e1       	ldi	r24, 0x10	; 16
     d04:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	twi_start();
     d08:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <twi_start>
	twi_send_byte(DS3232_ADDRESS_R);
     d0c:	81 ed       	ldi	r24, 0xD1	; 209
     d0e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <twi_send_byte>
	uint8_t offset = twi_recieve_byte_noack();
     d12:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <twi_recieve_byte_noack>
	*aging_offset = offset & 0b01111111;
     d16:	8f 77       	andi	r24, 0x7F	; 127
     d18:	88 83       	st	Y, r24
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <init_states>:
#include "divergence_numbers.h"
#include "usart_driver.h"

void init_states(void)
{
	prog_divergence[0] = 571024;
     d20:	80 e9       	ldi	r24, 0x90	; 144
     d22:	96 eb       	ldi	r25, 0xB6	; 182
     d24:	a8 e0       	ldi	r26, 0x08	; 8
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	80 93 7c 01 	sts	0x017C, r24
     d2c:	90 93 7d 01 	sts	0x017D, r25
     d30:	a0 93 7e 01 	sts	0x017E, r26
     d34:	b0 93 7f 01 	sts	0x017F, r27
	prog_divergence[1] = 571013;
     d38:	85 e8       	ldi	r24, 0x85	; 133
     d3a:	96 eb       	ldi	r25, 0xB6	; 182
     d3c:	a8 e0       	ldi	r26, 0x08	; 8
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	80 93 80 01 	sts	0x0180, r24
     d44:	90 93 81 01 	sts	0x0181, r25
     d48:	a0 93 82 01 	sts	0x0182, r26
     d4c:	b0 93 83 01 	sts	0x0183, r27
	prog_divergence[2] = 523299;
     d50:	83 e2       	ldi	r24, 0x23	; 35
     d52:	9c ef       	ldi	r25, 0xFC	; 252
     d54:	a7 e0       	ldi	r26, 0x07	; 7
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	80 93 84 01 	sts	0x0184, r24
     d5c:	90 93 85 01 	sts	0x0185, r25
     d60:	a0 93 86 01 	sts	0x0186, r26
     d64:	b0 93 87 01 	sts	0x0187, r27
	prog_divergence[3] = 456903;
     d68:	87 ec       	ldi	r24, 0xC7	; 199
     d6a:	98 ef       	ldi	r25, 0xF8	; 248
     d6c:	a6 e0       	ldi	r26, 0x06	; 6
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	80 93 88 01 	sts	0x0188, r24
     d74:	90 93 89 01 	sts	0x0189, r25
     d78:	a0 93 8a 01 	sts	0x018A, r26
     d7c:	b0 93 8b 01 	sts	0x018B, r27
	prog_divergence[4] = 409420;
     d80:	8c e4       	ldi	r24, 0x4C	; 76
     d82:	9f e3       	ldi	r25, 0x3F	; 63
     d84:	a6 e0       	ldi	r26, 0x06	; 6
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	80 93 8c 01 	sts	0x018C, r24
     d8c:	90 93 8d 01 	sts	0x018D, r25
     d90:	a0 93 8e 01 	sts	0x018E, r26
     d94:	b0 93 8f 01 	sts	0x018F, r27
	prog_divergence[5] = 337187;
     d98:	83 e2       	ldi	r24, 0x23	; 35
     d9a:	95 e2       	ldi	r25, 0x25	; 37
     d9c:	a5 e0       	ldi	r26, 0x05	; 5
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	80 93 90 01 	sts	0x0190, r24
     da4:	90 93 91 01 	sts	0x0191, r25
     da8:	a0 93 92 01 	sts	0x0192, r26
     dac:	b0 93 93 01 	sts	0x0193, r27
	prog_divergence[6] = 409431;
     db0:	87 e5       	ldi	r24, 0x57	; 87
     db2:	9f e3       	ldi	r25, 0x3F	; 63
     db4:	a6 e0       	ldi	r26, 0x06	; 6
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	80 93 94 01 	sts	0x0194, r24
     dbc:	90 93 95 01 	sts	0x0195, r25
     dc0:	a0 93 96 01 	sts	0x0196, r26
     dc4:	b0 93 97 01 	sts	0x0197, r27
	prog_divergence[7] = 456914;
     dc8:	82 ed       	ldi	r24, 0xD2	; 210
     dca:	98 ef       	ldi	r25, 0xF8	; 248
     dcc:	a6 e0       	ldi	r26, 0x06	; 6
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	80 93 98 01 	sts	0x0198, r24
     dd4:	90 93 99 01 	sts	0x0199, r25
     dd8:	a0 93 9a 01 	sts	0x019A, r26
     ddc:	b0 93 9b 01 	sts	0x019B, r27
	prog_divergence[8] = 523307;
     de0:	8b e2       	ldi	r24, 0x2B	; 43
     de2:	9c ef       	ldi	r25, 0xFC	; 252
     de4:	a7 e0       	ldi	r26, 0x07	; 7
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	80 93 9c 01 	sts	0x019C, r24
     dec:	90 93 9d 01 	sts	0x019D, r25
     df0:	a0 93 9e 01 	sts	0x019E, r26
     df4:	b0 93 9f 01 	sts	0x019F, r27
	prog_divergence[9] = 571046;
     df8:	86 ea       	ldi	r24, 0xA6	; 166
     dfa:	96 eb       	ldi	r25, 0xB6	; 182
     dfc:	a8 e0       	ldi	r26, 0x08	; 8
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	80 93 a0 01 	sts	0x01A0, r24
     e04:	90 93 a1 01 	sts	0x01A1, r25
     e08:	a0 93 a2 01 	sts	0x01A2, r26
     e0c:	b0 93 a3 01 	sts	0x01A3, r27
	prog_divergence[10] = 1130205;
     e10:	8d ed       	ldi	r24, 0xDD	; 221
     e12:	9e e3       	ldi	r25, 0x3E	; 62
     e14:	a1 e1       	ldi	r26, 0x11	; 17
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	80 93 a4 01 	sts	0x01A4, r24
     e1c:	90 93 a5 01 	sts	0x01A5, r25
     e20:	a0 93 a6 01 	sts	0x01A6, r26
     e24:	b0 93 a7 01 	sts	0x01A7, r27
	
	divergence_rand = 0;
     e28:	10 92 63 01 	sts	0x0163, r1
     e2c:	10 92 64 01 	sts	0x0164, r1
     e30:	10 92 65 01 	sts	0x0165, r1
     e34:	10 92 66 01 	sts	0x0166, r1
	display_mode_state = DISPLAY_MODE_CLOCK;
     e38:	10 92 69 01 	sts	0x0169, r1
     e3c:	10 92 68 01 	sts	0x0168, r1
	display_mode_substate = 0;
     e40:	10 92 61 01 	sts	0x0161, r1
     e44:	10 92 60 01 	sts	0x0160, r1
     e48:	08 95       	ret

00000e4a <init_button_interrupts>:
}

void init_button_interrupts(void)
{
	PCICR |= (1 << PCIE0);
     e4a:	e8 e6       	ldi	r30, 0x68	; 104
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1) | (1 << PCINT7);
     e54:	eb e6       	ldi	r30, 0x6B	; 107
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	82 68       	ori	r24, 0x82	; 130
     e5c:	80 83       	st	Z, r24
	sei();
     e5e:	78 94       	sei
     e60:	08 95       	ret

00000e62 <display_mode_timer_init>:
}

void display_mode_timer_init(void)
{
	OCR1A = 32;
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	90 93 89 00 	sts	0x0089, r25
     e6a:	80 93 88 00 	sts	0x0088, r24
	TCCR1A |= (1 << WGM01);
     e6e:	e0 e8       	ldi	r30, 0x80	; 128
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	82 60       	ori	r24, 0x02	; 2
     e76:	80 83       	st	Z, r24
	TCCR1B = (1 << CS00) | (1 << CS02);
     e78:	85 e0       	ldi	r24, 0x05	; 5
     e7a:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1 << OCIE1A);
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	80 93 6f 00 	sts	0x006F, r24
	TIFR1 = (1 << OCF1A);
     e84:	86 bb       	out	0x16, r24	; 22
	sei();
     e86:	78 94       	sei
     e88:	08 95       	ret

00000e8a <__vector_3>:
}

ISR(BUTTON_INTERUPT_VECT)
{
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	6f 93       	push	r22
     ea4:	7f 93       	push	r23
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	af 93       	push	r26
     eac:	bf 93       	push	r27
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
	
	if(bit_is_set(PIN_BUTTON1, BV_BUTTON1)/* & bit_is_clear(PIN_BUTTON2, BV_BUTTON2)*/)
     eb6:	19 9b       	sbis	0x03, 1	; 3
     eb8:	59 c0       	rjmp	.+178    	; 0xf6c <__vector_3+0xe2>
	{
		
		switch(display_mode_state)
     eba:	80 91 68 01 	lds	r24, 0x0168
     ebe:	90 91 69 01 	lds	r25, 0x0169
     ec2:	87 30       	cpi	r24, 0x07	; 7
     ec4:	91 05       	cpc	r25, r1
     ec6:	08 f0       	brcs	.+2      	; 0xeca <__vector_3+0x40>
     ec8:	51 c0       	rjmp	.+162    	; 0xf6c <__vector_3+0xe2>
     eca:	fc 01       	movw	r30, r24
     ecc:	ec 5c       	subi	r30, 0xCC	; 204
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__tablejump2__>
		{
			case DISPLAY_MODE_CLOCK:
				display_mode_state = DISPLAY_MODE_DATE;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	90 93 69 01 	sts	0x0169, r25
     edc:	80 93 68 01 	sts	0x0168, r24
				// START TIMER TO RETURN TO CLOCK STATE AFTER 30 SECONDS
				break;
     ee0:	45 c0       	rjmp	.+138    	; 0xf6c <__vector_3+0xe2>
			
			case DISPLAY_MODE_DATE:
				display_mode_state = DISPLAY_MODE_SETTINGS;
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	90 93 69 01 	sts	0x0169, r25
     eea:	80 93 68 01 	sts	0x0168, r24
				break;
     eee:	3e c0       	rjmp	.+124    	; 0xf6c <__vector_3+0xe2>
				
			case DISPLAY_MODE_SETTINGS:
				if(display_mode_substate == DISPLAY_MODE_SUBSTATE_MAX_SETTINGS)
     ef0:	80 91 60 01 	lds	r24, 0x0160
     ef4:	90 91 61 01 	lds	r25, 0x0161
     ef8:	0b 97       	sbiw	r24, 0x0b	; 11
     efa:	49 f4       	brne	.+18     	; 0xf0e <__vector_3+0x84>
				{
					display_mode_state = DISPLAY_MODE_CLOCK;
     efc:	10 92 69 01 	sts	0x0169, r1
     f00:	10 92 68 01 	sts	0x0168, r1
					display_mode_substate = 0;
     f04:	10 92 61 01 	sts	0x0161, r1
     f08:	10 92 60 01 	sts	0x0160, r1
     f0c:	2f c0       	rjmp	.+94     	; 0xf6c <__vector_3+0xe2>
				}
				else
					display_mode_substate++;
     f0e:	80 91 60 01 	lds	r24, 0x0160
     f12:	90 91 61 01 	lds	r25, 0x0161
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	90 93 61 01 	sts	0x0161, r25
     f1c:	80 93 60 01 	sts	0x0160, r24
     f20:	25 c0       	rjmp	.+74     	; 0xf6c <__vector_3+0xe2>
				break;
				
			case DISPLAY_MODE_PROG_DIVERGENCE:
				display_mode_state = DISPLAY_MODE_RAND_DIVERGENCE;
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 69 01 	sts	0x0169, r25
     f2a:	80 93 68 01 	sts	0x0168, r24
				break;
     f2e:	1e c0       	rjmp	.+60     	; 0xf6c <__vector_3+0xe2>
				
			case DISPLAY_MODE_RAND_DIVERGENCE:
				display_mode_state = DISPLAY_MODE_CUST_DIVERGENCE;
     f30:	85 e0       	ldi	r24, 0x05	; 5
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	90 93 69 01 	sts	0x0169, r25
     f38:	80 93 68 01 	sts	0x0168, r24
				break;
     f3c:	17 c0       	rjmp	.+46     	; 0xf6c <__vector_3+0xe2>
			
			case DISPLAY_MODE_CUST_DIVERGENCE:
				if(display_mode_substate == DISPLAY_MODE_SUBSTATE_MAX_DIVERGENCE)
     f3e:	80 91 60 01 	lds	r24, 0x0160
     f42:	90 91 61 01 	lds	r25, 0x0161
     f46:	05 97       	sbiw	r24, 0x05	; 5
     f48:	89 f4       	brne	.+34     	; 0xf6c <__vector_3+0xe2>
				{
					display_mode_state = DISPLAY_MODE_CUST_RAND_DIVERGENCE;
     f4a:	86 e0       	ldi	r24, 0x06	; 6
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 69 01 	sts	0x0169, r25
     f52:	80 93 68 01 	sts	0x0168, r24
					display_mode_substate = 0;
     f56:	10 92 61 01 	sts	0x0161, r1
     f5a:	10 92 60 01 	sts	0x0160, r1
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <__vector_3+0xe2>
				}
				break;
			
			case DISPLAY_MODE_CUST_RAND_DIVERGENCE:
				display_mode_state = DISPLAY_MODE_PROG_DIVERGENCE;
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 69 01 	sts	0x0169, r25
     f68:	80 93 68 01 	sts	0x0168, r24
				break;
				
		}
	}
	
	if(bit_is_set(PIN_BUTTON2, BV_BUTTON2)/* & bit_is_clear(PIN_BUTTON1, BV_BUTTON1)*/)
     f6c:	1f 9b       	sbis	0x03, 7	; 3
     f6e:	dd c2       	rjmp	.+1466   	; 0x152a <__vector_3+0x6a0>
	{
		switch(display_mode_state)
     f70:	80 91 68 01 	lds	r24, 0x0168
     f74:	90 91 69 01 	lds	r25, 0x0169
     f78:	87 30       	cpi	r24, 0x07	; 7
     f7a:	91 05       	cpc	r25, r1
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <__vector_3+0xf6>
     f7e:	d5 c2       	rjmp	.+1450   	; 0x152a <__vector_3+0x6a0>
     f80:	fc 01       	movw	r30, r24
     f82:	e5 5c       	subi	r30, 0xC5	; 197
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__tablejump2__>
		{
			case DISPLAY_MODE_CLOCK:
				display_mode_state = DISPLAY_MODE_PROG_DIVERGENCE;
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 69 01 	sts	0x0169, r25
     f92:	80 93 68 01 	sts	0x0168, r24
				break;
     f96:	c9 c2       	rjmp	.+1426   	; 0x152a <__vector_3+0x6a0>
			
			case DISPLAY_MODE_DATE:
				display_mode_state = DISPLAY_MODE_CLOCK;
     f98:	10 92 69 01 	sts	0x0169, r1
     f9c:	10 92 68 01 	sts	0x0168, r1
				break;
     fa0:	c4 c2       	rjmp	.+1416   	; 0x152a <__vector_3+0x6a0>
			
			case DISPLAY_MODE_SETTINGS:
				switch(display_mode_substate)
     fa2:	80 91 60 01 	lds	r24, 0x0160
     fa6:	90 91 61 01 	lds	r25, 0x0161
     faa:	8c 30       	cpi	r24, 0x0C	; 12
     fac:	91 05       	cpc	r25, r1
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <__vector_3+0x128>
     fb0:	bc c2       	rjmp	.+1400   	; 0x152a <__vector_3+0x6a0>
     fb2:	fc 01       	movw	r30, r24
     fb4:	ee 5b       	subi	r30, 0xBE	; 190
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__tablejump2__>
				{
					case DISPLAY_MODE_SETTINGS_HOURS:
						if(clock_mode_12_24)
     fbc:	80 91 6c 01 	lds	r24, 0x016C
     fc0:	88 23       	and	r24, r24
     fc2:	11 f1       	breq	.+68     	; 0x1008 <__vector_3+0x17e>
						{
							if(time[0]>=1 & time[1]>=2)
     fc4:	90 91 6f 01 	lds	r25, 0x016F
     fc8:	20 91 70 01 	lds	r18, 0x0170
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <__vector_3+0x14a>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	88 23       	and	r24, r24
     fd6:	51 f0       	breq	.+20     	; 0xfec <__vector_3+0x162>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	91 11       	cpse	r25, r1
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <__vector_3+0x156>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	88 23       	and	r24, r24
     fe2:	21 f0       	breq	.+8      	; 0xfec <__vector_3+0x162>
								set_hours(1);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	0e 94 46 01 	call	0x28c	; 0x28c <set_hours>
     fea:	9f c2       	rjmp	.+1342   	; 0x152a <__vector_3+0x6a0>
							else
								set_hours(time[0]*10+time[1]+1);
     fec:	90 91 6f 01 	lds	r25, 0x016F
     ff0:	80 91 70 01 	lds	r24, 0x0170
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	99 0f       	add	r25, r25
     ff8:	29 2f       	mov	r18, r25
     ffa:	22 0f       	add	r18, r18
     ffc:	22 0f       	add	r18, r18
     ffe:	92 0f       	add	r25, r18
    1000:	89 0f       	add	r24, r25
    1002:	0e 94 46 01 	call	0x28c	; 0x28c <set_hours>
    1006:	91 c2       	rjmp	.+1314   	; 0x152a <__vector_3+0x6a0>
						}
						else
						{
							if(time[0]>=2 & time[1]>=3)
    1008:	90 91 6f 01 	lds	r25, 0x016F
    100c:	20 91 70 01 	lds	r18, 0x0170
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	23 30       	cpi	r18, 0x03	; 3
    1014:	08 f4       	brcc	.+2      	; 0x1018 <__vector_3+0x18e>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	88 23       	and	r24, r24
    101a:	51 f0       	breq	.+20     	; 0x1030 <__vector_3+0x1a6>
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	92 30       	cpi	r25, 0x02	; 2
    1020:	08 f4       	brcc	.+2      	; 0x1024 <__vector_3+0x19a>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	88 23       	and	r24, r24
    1026:	21 f0       	breq	.+8      	; 0x1030 <__vector_3+0x1a6>
								set_hours(0);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 46 01 	call	0x28c	; 0x28c <set_hours>
    102e:	7d c2       	rjmp	.+1274   	; 0x152a <__vector_3+0x6a0>
							else
								set_hours(time[0]*10+time[1]+1);
    1030:	90 91 6f 01 	lds	r25, 0x016F
    1034:	80 91 70 01 	lds	r24, 0x0170
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	99 0f       	add	r25, r25
    103c:	29 2f       	mov	r18, r25
    103e:	22 0f       	add	r18, r18
    1040:	22 0f       	add	r18, r18
    1042:	92 0f       	add	r25, r18
    1044:	89 0f       	add	r24, r25
    1046:	0e 94 46 01 	call	0x28c	; 0x28c <set_hours>
    104a:	6f c2       	rjmp	.+1246   	; 0x152a <__vector_3+0x6a0>
						}
						break;
					
					case DISPLAY_MODE_SETTINGS_MINUTES:
						if(time[2]==5 & time[3]==9)
    104c:	20 91 71 01 	lds	r18, 0x0171
    1050:	90 91 72 01 	lds	r25, 0x0172
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	99 30       	cpi	r25, 0x09	; 9
    1058:	09 f0       	breq	.+2      	; 0x105c <__vector_3+0x1d2>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	88 23       	and	r24, r24
    105e:	51 f0       	breq	.+20     	; 0x1074 <__vector_3+0x1ea>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	25 30       	cpi	r18, 0x05	; 5
    1064:	09 f0       	breq	.+2      	; 0x1068 <__vector_3+0x1de>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	88 23       	and	r24, r24
    106a:	21 f0       	breq	.+8      	; 0x1074 <__vector_3+0x1ea>
							set_minutes(0);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_minutes>
    1072:	5b c2       	rjmp	.+1206   	; 0x152a <__vector_3+0x6a0>
						else
							set_minutes(time[2]*10+time[3]+1);
    1074:	90 91 71 01 	lds	r25, 0x0171
    1078:	80 91 72 01 	lds	r24, 0x0172
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	99 0f       	add	r25, r25
    1080:	29 2f       	mov	r18, r25
    1082:	22 0f       	add	r18, r18
    1084:	22 0f       	add	r18, r18
    1086:	92 0f       	add	r25, r18
    1088:	89 0f       	add	r24, r25
    108a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_minutes>
    108e:	4d c2       	rjmp	.+1178   	; 0x152a <__vector_3+0x6a0>
						break;
					
					case DISPLAY_MODE_SETTINGS_SECONDS:
						zero_seconds();
    1090:	0e 94 a2 01 	call	0x344	; 0x344 <zero_seconds>
						break;
    1094:	4a c2       	rjmp	.+1172   	; 0x152a <__vector_3+0x6a0>
					
					case DISPLAY_MODE_SETTINGS_12_24:
						set_all_mode_12_24(!clock_mode_12_24);
    1096:	90 91 6c 01 	lds	r25, 0x016C
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	91 11       	cpse	r25, r1
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <set_all_mode_12_24>
						clock_mode_12_24 = !clock_mode_12_24;
    10a4:	90 91 6c 01 	lds	r25, 0x016C
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	91 11       	cpse	r25, r1
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	80 93 6c 01 	sts	0x016C, r24
						break;
    10b2:	3b c2       	rjmp	.+1142   	; 0x152a <__vector_3+0x6a0>
					
					case DISPLAY_MODE_SETTINGS_MONTH:
						if(date[0]==1 & date[1]==2)
    10b4:	20 91 ac 01 	lds	r18, 0x01AC
    10b8:	90 91 ad 01 	lds	r25, 0x01AD
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	92 30       	cpi	r25, 0x02	; 2
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <__vector_3+0x23a>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	88 23       	and	r24, r24
    10c6:	51 f0       	breq	.+20     	; 0x10dc <__vector_3+0x252>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	21 30       	cpi	r18, 0x01	; 1
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__vector_3+0x246>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	88 23       	and	r24, r24
    10d2:	21 f0       	breq	.+8      	; 0x10dc <__vector_3+0x252>
							set_month(1);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	0e 94 b0 01 	call	0x360	; 0x360 <set_month>
    10da:	27 c2       	rjmp	.+1102   	; 0x152a <__vector_3+0x6a0>
						else
							set_month(date[0]*10+date[1]+1);
    10dc:	90 91 ac 01 	lds	r25, 0x01AC
    10e0:	80 91 ad 01 	lds	r24, 0x01AD
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	99 0f       	add	r25, r25
    10e8:	29 2f       	mov	r18, r25
    10ea:	22 0f       	add	r18, r18
    10ec:	22 0f       	add	r18, r18
    10ee:	92 0f       	add	r25, r18
    10f0:	89 0f       	add	r24, r25
    10f2:	0e 94 b0 01 	call	0x360	; 0x360 <set_month>
    10f6:	19 c2       	rjmp	.+1074   	; 0x152a <__vector_3+0x6a0>
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
    10f8:	ac ea       	ldi	r26, 0xAC	; 172
    10fa:	b1 e0       	ldi	r27, 0x01	; 1
    10fc:	dc 91       	ld	r29, X
    10fe:	ed ea       	ldi	r30, 0xAD	; 173
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	f0 80       	ld	r15, Z
							date[0]==0 & date[1]==3 |
    1104:	2c 91       	ld	r18, X
    1106:	90 81       	ld	r25, Z
							date[0]==0 & date[1]==5 |
    1108:	1c 91       	ld	r17, X
    110a:	00 81       	ld	r16, Z
							date[0]==0 & date[1]==7 |
    110c:	7c 91       	ld	r23, X
    110e:	c0 81       	ld	r28, Z
							date[0]==0 & date[1]==8 |
    1110:	5c 91       	ld	r21, X
    1112:	60 81       	ld	r22, Z
							date[0]==1 & date[1]==0 |
    1114:	3c 91       	ld	r19, X
    1116:	40 81       	ld	r20, Z
							date[0]==1 & date[1]==2)
    1118:	ac 91       	ld	r26, X
    111a:	e0 81       	ld	r30, Z
							set_month(date[0]*10+date[1]+1);
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
							date[0]==0 & date[1]==3 |
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	93 30       	cpi	r25, 0x03	; 3
    1120:	09 f0       	breq	.+2      	; 0x1124 <__vector_3+0x29a>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	21 11       	cpse	r18, r1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	28 2f       	mov	r18, r24
    112c:	29 23       	and	r18, r25
						else
							set_month(date[0]*10+date[1]+1);
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	f8 12       	cpse	r15, r24
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	d1 11       	cpse	r29, r1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	89 23       	and	r24, r25
    113c:	28 2b       	or	r18, r24
							date[0]==0 & date[1]==3 |
							date[0]==0 & date[1]==5 |
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	05 30       	cpi	r16, 0x05	; 5
    1142:	09 f0       	breq	.+2      	; 0x1146 <__vector_3+0x2bc>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	11 11       	cpse	r17, r1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	89 23       	and	r24, r25
							set_month(date[0]*10+date[1]+1);
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
							date[0]==0 & date[1]==3 |
    114e:	28 2b       	or	r18, r24
							date[0]==0 & date[1]==5 |
							date[0]==0 & date[1]==7 |
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	c7 30       	cpi	r28, 0x07	; 7
    1154:	09 f0       	breq	.+2      	; 0x1158 <__vector_3+0x2ce>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	71 11       	cpse	r23, r1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	89 23       	and	r24, r25
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
							date[0]==0 & date[1]==3 |
							date[0]==0 & date[1]==5 |
    1160:	28 2b       	or	r18, r24
							date[0]==0 & date[1]==7 |
							date[0]==0 & date[1]==8 |
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	68 30       	cpi	r22, 0x08	; 8
    1166:	09 f0       	breq	.+2      	; 0x116a <__vector_3+0x2e0>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	51 11       	cpse	r21, r1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	89 23       	and	r24, r25
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
							date[0]==0 & date[1]==3 |
							date[0]==0 & date[1]==5 |
							date[0]==0 & date[1]==7 |
    1172:	28 2b       	or	r18, r24
							date[0]==0 & date[1]==8 |
							date[0]==1 & date[1]==0 |
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	41 11       	cpse	r20, r1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	31 30       	cpi	r19, 0x01	; 1
    117e:	09 f0       	breq	.+2      	; 0x1182 <__vector_3+0x2f8>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	89 23       	and	r24, r25
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
							date[0]==0 & date[1]==3 |
							date[0]==0 & date[1]==5 |
							date[0]==0 & date[1]==7 |
							date[0]==0 & date[1]==8 |
    1184:	82 2b       	or	r24, r18
						else
							set_month(date[0]*10+date[1]+1);
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
    1186:	51 f4       	brne	.+20     	; 0x119c <__vector_3+0x312>
							date[0]==0 & date[1]==3 |
							date[0]==0 & date[1]==5 |
							date[0]==0 & date[1]==7 |
							date[0]==0 & date[1]==8 |
							date[0]==1 & date[1]==0 |
							date[0]==1 & date[1]==2)
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	e2 30       	cpi	r30, 0x02	; 2
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_3+0x306>
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	a1 30       	cpi	r26, 0x01	; 1
    1194:	09 f0       	breq	.+2      	; 0x1198 <__vector_3+0x30e>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	89 23       	and	r24, r25
						else
							set_month(date[0]*10+date[1]+1);
						break;
					
					case DISPLAY_MODE_SETTINGS_DAY:
						if( date[0]==0 & date[1]==1 |
    119a:	11 f1       	breq	.+68     	; 0x11e0 <__vector_3+0x356>
							date[0]==0 & date[1]==7 |
							date[0]==0 & date[1]==8 |
							date[0]==1 & date[1]==0 |
							date[0]==1 & date[1]==2)
						{
							if(date[2]==3 & date[3]==1)
    119c:	90 91 ae 01 	lds	r25, 0x01AE
    11a0:	20 91 af 01 	lds	r18, 0x01AF
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	21 30       	cpi	r18, 0x01	; 1
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_3+0x322>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	88 23       	and	r24, r24
    11ae:	51 f0       	breq	.+20     	; 0x11c4 <__vector_3+0x33a>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	93 30       	cpi	r25, 0x03	; 3
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <__vector_3+0x32e>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	88 23       	and	r24, r24
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <__vector_3+0x33a>
								set_day(1);
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    11c2:	b3 c1       	rjmp	.+870    	; 0x152a <__vector_3+0x6a0>
							else
								set_day(date[2]*10+date[3]+1);
    11c4:	90 91 ae 01 	lds	r25, 0x01AE
    11c8:	80 91 af 01 	lds	r24, 0x01AF
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	99 0f       	add	r25, r25
    11d0:	29 2f       	mov	r18, r25
    11d2:	22 0f       	add	r18, r18
    11d4:	22 0f       	add	r18, r18
    11d6:	92 0f       	add	r25, r18
    11d8:	89 0f       	add	r24, r25
    11da:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    11de:	a5 c1       	rjmp	.+842    	; 0x152a <__vector_3+0x6a0>
						}
						else if(date[0]==0 & date[1]==2)
    11e0:	90 91 ac 01 	lds	r25, 0x01AC
    11e4:	20 91 ad 01 	lds	r18, 0x01AD
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <__vector_3+0x366>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__vector_3+0x36c>
    11f4:	90 c0       	rjmp	.+288    	; 0x1316 <__vector_3+0x48c>
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	91 11       	cpse	r25, r1
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	88 23       	and	r24, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__vector_3+0x378>
    1200:	8a c0       	rjmp	.+276    	; 0x1316 <__vector_3+0x48c>
						{
							if((date[4]*10+date[5])%4 | (!((date[4]*10+date[5])%100) & ((long)(date[4]*10+date[5])%400)) )
    1202:	a0 eb       	ldi	r26, 0xB0	; 176
    1204:	b1 e0       	ldi	r27, 0x01	; 1
    1206:	4c 91       	ld	r20, X
    1208:	e1 eb       	ldi	r30, 0xB1	; 177
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	c0 81       	ld	r28, Z
    120e:	2c 91       	ld	r18, X
    1210:	80 81       	ld	r24, Z
    1212:	dc 91       	ld	r29, X
    1214:	f0 81       	ld	r31, Z
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	3a e0       	ldi	r19, 0x0A	; 10
    121a:	23 9f       	mul	r18, r19
    121c:	80 0d       	add	r24, r0
    121e:	91 1d       	adc	r25, r1
    1220:	11 24       	eor	r1, r1
    1222:	64 e6       	ldi	r22, 0x64	; 100
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
    122a:	01 e0       	ldi	r16, 0x01	; 1
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	89 2b       	or	r24, r25
    1234:	19 f0       	breq	.+6      	; 0x123c <__vector_3+0x3b2>
    1236:	00 e0       	ldi	r16, 0x00	; 0
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	98 01       	movw	r18, r16
    123c:	ea e0       	ldi	r30, 0x0A	; 10
    123e:	8f 2f       	mov	r24, r31
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	ed 9f       	mul	r30, r29
    1244:	80 0d       	add	r24, r0
    1246:	91 1d       	adc	r25, r1
    1248:	11 24       	eor	r1, r1
    124a:	60 e9       	ldi	r22, 0x90	; 144
    124c:	71 e0       	ldi	r23, 0x01	; 1
    124e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
    1252:	aa 27       	eor	r26, r26
    1254:	97 fd       	sbrc	r25, 7
    1256:	a0 95       	com	r26
    1258:	ba 2f       	mov	r27, r26
    125a:	08 23       	and	r16, r24
    125c:	19 23       	and	r17, r25
    125e:	2a 23       	and	r18, r26
    1260:	3b 23       	and	r19, r27
    1262:	8c 2f       	mov	r24, r28
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	e4 9f       	mul	r30, r20
    1268:	80 0d       	add	r24, r0
    126a:	91 1d       	adc	r25, r1
    126c:	11 24       	eor	r1, r1
    126e:	64 e0       	ldi	r22, 0x04	; 4
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
    1276:	aa 27       	eor	r26, r26
    1278:	97 fd       	sbrc	r25, 7
    127a:	a0 95       	com	r26
    127c:	ba 2f       	mov	r27, r26
    127e:	08 2b       	or	r16, r24
    1280:	19 2b       	or	r17, r25
    1282:	2a 2b       	or	r18, r26
    1284:	3b 2b       	or	r19, r27
    1286:	01 2b       	or	r16, r17
    1288:	02 2b       	or	r16, r18
    128a:	03 2b       	or	r16, r19
    128c:	11 f1       	breq	.+68     	; 0x12d2 <__vector_3+0x448>
							{
								if(date[2]==2 & date[3]==8)
    128e:	90 91 ae 01 	lds	r25, 0x01AE
    1292:	20 91 af 01 	lds	r18, 0x01AF
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	28 30       	cpi	r18, 0x08	; 8
    129a:	09 f0       	breq	.+2      	; 0x129e <__vector_3+0x414>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	88 23       	and	r24, r24
    12a0:	51 f0       	breq	.+20     	; 0x12b6 <__vector_3+0x42c>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	92 30       	cpi	r25, 0x02	; 2
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__vector_3+0x420>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	88 23       	and	r24, r24
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <__vector_3+0x42c>
									set_day(1);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    12b4:	3a c1       	rjmp	.+628    	; 0x152a <__vector_3+0x6a0>
								else
									set_day(date[2]*10+date[3]+1);
    12b6:	90 91 ae 01 	lds	r25, 0x01AE
    12ba:	80 91 af 01 	lds	r24, 0x01AF
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	99 0f       	add	r25, r25
    12c2:	29 2f       	mov	r18, r25
    12c4:	22 0f       	add	r18, r18
    12c6:	22 0f       	add	r18, r18
    12c8:	92 0f       	add	r25, r18
    12ca:	89 0f       	add	r24, r25
    12cc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    12d0:	2c c1       	rjmp	.+600    	; 0x152a <__vector_3+0x6a0>
							}
							else
							{
								if(date[2]==2 & date[3]==9)
    12d2:	90 91 ae 01 	lds	r25, 0x01AE
    12d6:	20 91 af 01 	lds	r18, 0x01AF
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	29 30       	cpi	r18, 0x09	; 9
    12de:	09 f0       	breq	.+2      	; 0x12e2 <__vector_3+0x458>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	88 23       	and	r24, r24
    12e4:	51 f0       	breq	.+20     	; 0x12fa <__vector_3+0x470>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	92 30       	cpi	r25, 0x02	; 2
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__vector_3+0x464>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	88 23       	and	r24, r24
    12f0:	21 f0       	breq	.+8      	; 0x12fa <__vector_3+0x470>
									set_day(1);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    12f8:	18 c1       	rjmp	.+560    	; 0x152a <__vector_3+0x6a0>
								else
									set_day(date[2]*10+date[3]+1);
    12fa:	90 91 ae 01 	lds	r25, 0x01AE
    12fe:	80 91 af 01 	lds	r24, 0x01AF
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	99 0f       	add	r25, r25
    1306:	29 2f       	mov	r18, r25
    1308:	22 0f       	add	r18, r18
    130a:	22 0f       	add	r18, r18
    130c:	92 0f       	add	r25, r18
    130e:	89 0f       	add	r24, r25
    1310:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    1314:	0a c1       	rjmp	.+532    	; 0x152a <__vector_3+0x6a0>
							}
						}
						else
						{
							if(date[2]==3 & date[3]==0)
    1316:	90 91 ae 01 	lds	r25, 0x01AE
    131a:	20 91 af 01 	lds	r18, 0x01AF
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	21 11       	cpse	r18, r1
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	88 23       	and	r24, r24
    1326:	51 f0       	breq	.+20     	; 0x133c <__vector_3+0x4b2>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	93 30       	cpi	r25, 0x03	; 3
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_3+0x4a6>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	88 23       	and	r24, r24
    1332:	21 f0       	breq	.+8      	; 0x133c <__vector_3+0x4b2>
								set_day(1);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    133a:	f7 c0       	rjmp	.+494    	; 0x152a <__vector_3+0x6a0>
							else
								set_day(date[2]*10+date[3]+1);
    133c:	90 91 ae 01 	lds	r25, 0x01AE
    1340:	80 91 af 01 	lds	r24, 0x01AF
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	99 0f       	add	r25, r25
    1348:	29 2f       	mov	r18, r25
    134a:	22 0f       	add	r18, r18
    134c:	22 0f       	add	r18, r18
    134e:	92 0f       	add	r25, r18
    1350:	89 0f       	add	r24, r25
    1352:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <set_day>
    1356:	e9 c0       	rjmp	.+466    	; 0x152a <__vector_3+0x6a0>
						}
						break;
					
					case DISPLAY_MODE_SETTINGS_YEAR:
						if(date[4]==9 & date[5]==9)
    1358:	20 91 b0 01 	lds	r18, 0x01B0
    135c:	90 91 b1 01 	lds	r25, 0x01B1
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	99 30       	cpi	r25, 0x09	; 9
    1364:	09 f0       	breq	.+2      	; 0x1368 <__vector_3+0x4de>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	88 23       	and	r24, r24
    136a:	51 f0       	breq	.+20     	; 0x1380 <__vector_3+0x4f6>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	29 30       	cpi	r18, 0x09	; 9
    1370:	09 f0       	breq	.+2      	; 0x1374 <__vector_3+0x4ea>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	88 23       	and	r24, r24
    1376:	21 f0       	breq	.+8      	; 0x1380 <__vector_3+0x4f6>
							set_year(0);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0e 94 0c 02 	call	0x418	; 0x418 <set_year>
    137e:	d5 c0       	rjmp	.+426    	; 0x152a <__vector_3+0x6a0>
						else
							set_year(date[4]*10+date[5]+1);
    1380:	90 91 b0 01 	lds	r25, 0x01B0
    1384:	80 91 b1 01 	lds	r24, 0x01B1
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	99 0f       	add	r25, r25
    138c:	29 2f       	mov	r18, r25
    138e:	22 0f       	add	r18, r18
    1390:	22 0f       	add	r18, r18
    1392:	92 0f       	add	r25, r18
    1394:	89 0f       	add	r24, r25
    1396:	0e 94 0c 02 	call	0x418	; 0x418 <set_year>
    139a:	c7 c0       	rjmp	.+398    	; 0x152a <__vector_3+0x6a0>
						break;
					
					case DISPLAY_MODE_SETTINGS_MMDD_DDMM:
						if(clock_mode_mmdd_ddmm)
    139c:	80 91 6e 01 	lds	r24, 0x016E
    13a0:	88 23       	and	r24, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <__vector_3+0x520>
							clock_mode_mmdd_ddmm = 0;
    13a4:	10 92 6e 01 	sts	0x016E, r1
    13a8:	c0 c0       	rjmp	.+384    	; 0x152a <__vector_3+0x6a0>
						else
							clock_mode_mmdd_ddmm = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 6e 01 	sts	0x016E, r24
    13b0:	bc c0       	rjmp	.+376    	; 0x152a <__vector_3+0x6a0>
						break;
					
					case DISPLAY_MODE_SETTINGS_BLANKING_HOUR:
						if(clock_mode_12_24)
    13b2:	80 91 6c 01 	lds	r24, 0x016C
    13b6:	88 23       	and	r24, r24
    13b8:	a1 f0       	breq	.+40     	; 0x13e2 <__vector_3+0x558>
						{
							if(blanking_hour == 23)
    13ba:	80 91 6a 01 	lds	r24, 0x016A
    13be:	87 31       	cpi	r24, 0x17	; 23
    13c0:	39 f4       	brne	.+14     	; 0x13d0 <__vector_3+0x546>
								set_alarm1_time(0, 0, 0, 0);
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 69 05 	call	0xad2	; 0xad2 <set_alarm1_time>
    13ce:	ad c0       	rjmp	.+346    	; 0x152a <__vector_3+0x6a0>
							else
								set_alarm1_time(blanking_hour+1, 0, 0, 0);
    13d0:	80 91 6a 01 	lds	r24, 0x016A
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	8f 5f       	subi	r24, 0xFF	; 255
    13dc:	0e 94 69 05 	call	0xad2	; 0xad2 <set_alarm1_time>
    13e0:	a4 c0       	rjmp	.+328    	; 0x152a <__vector_3+0x6a0>
						}
						else
						{
							if(blanking_hour == 12)
    13e2:	80 91 6a 01 	lds	r24, 0x016A
    13e6:	8c 30       	cpi	r24, 0x0C	; 12
    13e8:	41 f4       	brne	.+16     	; 0x13fa <__vector_3+0x570>
								set_alarm1_time(1, 0, 0, alarm1_ampm_bit);
    13ea:	20 91 6b 01 	lds	r18, 0x016B
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 69 05 	call	0xad2	; 0xad2 <set_alarm1_time>
    13f8:	98 c0       	rjmp	.+304    	; 0x152a <__vector_3+0x6a0>
							else
								set_alarm1_time(blanking_hour+1, 0, 0, alarm1_ampm_bit);
    13fa:	20 91 6b 01 	lds	r18, 0x016B
    13fe:	80 91 6a 01 	lds	r24, 0x016A
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	0e 94 69 05 	call	0xad2	; 0xad2 <set_alarm1_time>
    140c:	8e c0       	rjmp	.+284    	; 0x152a <__vector_3+0x6a0>
						}
						break;
					
					case DISPLAY_MODE_SETTINGS_UNBLANKING_HOUR:
						if(clock_mode_12_24)
    140e:	80 91 6c 01 	lds	r24, 0x016C
    1412:	88 23       	and	r24, r24
    1414:	91 f0       	breq	.+36     	; 0x143a <__vector_3+0x5b0>
						{
							if(unblanking_hour == 23)
    1416:	80 91 67 01 	lds	r24, 0x0167
    141a:	87 31       	cpi	r24, 0x17	; 23
    141c:	31 f4       	brne	.+12     	; 0x142a <__vector_3+0x5a0>
								set_alarm2_time(0, 0, 0);
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 f5 05 	call	0xbea	; 0xbea <set_alarm2_time>
    1428:	80 c0       	rjmp	.+256    	; 0x152a <__vector_3+0x6a0>
							else
								set_alarm2_time(unblanking_hour+1, 0, 0);
    142a:	80 91 67 01 	lds	r24, 0x0167
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	0e 94 f5 05 	call	0xbea	; 0xbea <set_alarm2_time>
    1438:	78 c0       	rjmp	.+240    	; 0x152a <__vector_3+0x6a0>
						}
						else
						{
							if(unblanking_hour == 12)
    143a:	80 91 67 01 	lds	r24, 0x0167
    143e:	8c 30       	cpi	r24, 0x0C	; 12
    1440:	39 f4       	brne	.+14     	; 0x1450 <__vector_3+0x5c6>
								set_alarm2_time(1, 0, alarm2_ampm_bit);
    1442:	40 91 b2 01 	lds	r20, 0x01B2
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	0e 94 f5 05 	call	0xbea	; 0xbea <set_alarm2_time>
    144e:	6d c0       	rjmp	.+218    	; 0x152a <__vector_3+0x6a0>
							else
								set_alarm2_time(unblanking_hour+1, 0, alarm2_ampm_bit);
    1450:	40 91 b2 01 	lds	r20, 0x01B2
    1454:	80 91 67 01 	lds	r24, 0x0167
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	0e 94 f5 05 	call	0xbea	; 0xbea <set_alarm2_time>
    1460:	64 c0       	rjmp	.+200    	; 0x152a <__vector_3+0x6a0>
						}
						break;
						
					case DISPLAY_MODE_SETTINGS_BRIGHTNESS:
						if(global_nixie_brightness == BRIGHTNESS_MAX)
    1462:	80 91 e5 01 	lds	r24, 0x01E5
    1466:	87 30       	cpi	r24, 0x07	; 7
    1468:	21 f4       	brne	.+8      	; 0x1472 <__vector_3+0x5e8>
							global_nixie_brightness = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 e5 01 	sts	0x01E5, r24
    1470:	5c c0       	rjmp	.+184    	; 0x152a <__vector_3+0x6a0>
						else
							global_nixie_brightness++;
    1472:	80 91 e5 01 	lds	r24, 0x01E5
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	80 93 e5 01 	sts	0x01E5, r24
    147c:	56 c0       	rjmp	.+172    	; 0x152a <__vector_3+0x6a0>
						break;
					
					case DISPLAY_MODE_SETTINGS_OFFSET_ADJUST:
						if(offset_adjust == OFFSET_ADJUST_MAX)
    147e:	80 91 6d 01 	lds	r24, 0x016D
    1482:	8c 30       	cpi	r24, 0x0C	; 12
    1484:	21 f4       	brne	.+8      	; 0x148e <__vector_3+0x604>
							set_offset_adjust(0);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 68 06 	call	0xcd0	; 0xcd0 <set_offset_adjust>
    148c:	4e c0       	rjmp	.+156    	; 0x152a <__vector_3+0x6a0>
						else
							set_offset_adjust(offset_adjust+1);
    148e:	80 91 6d 01 	lds	r24, 0x016D
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	0e 94 68 06 	call	0xcd0	; 0xcd0 <set_offset_adjust>
    1498:	48 c0       	rjmp	.+144    	; 0x152a <__vector_3+0x6a0>
						break;
				}
				break;
				
			case DISPLAY_MODE_PROG_DIVERGENCE:
				if(display_mode_substate == PROG_DIVERGENCE_MAX)
    149a:	80 91 60 01 	lds	r24, 0x0160
    149e:	90 91 61 01 	lds	r25, 0x0161
    14a2:	0a 97       	sbiw	r24, 0x0a	; 10
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <__vector_3+0x626>
					display_mode_substate = 0;
    14a6:	10 92 61 01 	sts	0x0161, r1
    14aa:	10 92 60 01 	sts	0x0160, r1
    14ae:	3d c0       	rjmp	.+122    	; 0x152a <__vector_3+0x6a0>
				else
					display_mode_substate++;
    14b0:	80 91 60 01 	lds	r24, 0x0160
    14b4:	90 91 61 01 	lds	r25, 0x0161
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	90 93 61 01 	sts	0x0161, r25
    14be:	80 93 60 01 	sts	0x0160, r24
    14c2:	33 c0       	rjmp	.+102    	; 0x152a <__vector_3+0x6a0>
			
			case DISPLAY_MODE_RAND_DIVERGENCE:
			//GENERATE NEW RANDOM DIVERGENCE
			
			//PLACEHOLDER
				divergence_rand++;
    14c4:	80 91 63 01 	lds	r24, 0x0163
    14c8:	90 91 64 01 	lds	r25, 0x0164
    14cc:	a0 91 65 01 	lds	r26, 0x0165
    14d0:	b0 91 66 01 	lds	r27, 0x0166
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	a1 1d       	adc	r26, r1
    14d8:	b1 1d       	adc	r27, r1
    14da:	80 93 63 01 	sts	0x0163, r24
    14de:	90 93 64 01 	sts	0x0164, r25
    14e2:	a0 93 65 01 	sts	0x0165, r26
    14e6:	b0 93 66 01 	sts	0x0166, r27
				break;
    14ea:	1f c0       	rjmp	.+62     	; 0x152a <__vector_3+0x6a0>
			
			case DISPLAY_MODE_CUST_DIVERGENCE:
				if(divergence[display_mode_substate] == 9)
    14ec:	e0 91 60 01 	lds	r30, 0x0160
    14f0:	f0 91 61 01 	lds	r31, 0x0161
    14f4:	eb 58       	subi	r30, 0x8B	; 139
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	80 81       	ld	r24, Z
    14fa:	89 30       	cpi	r24, 0x09	; 9
    14fc:	41 f4       	brne	.+16     	; 0x150e <__vector_3+0x684>
					divergence[display_mode_substate] = 0;
    14fe:	e0 91 60 01 	lds	r30, 0x0160
    1502:	f0 91 61 01 	lds	r31, 0x0161
    1506:	eb 58       	subi	r30, 0x8B	; 139
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	10 82       	st	Z, r1
    150c:	0e c0       	rjmp	.+28     	; 0x152a <__vector_3+0x6a0>
				else
					divergence[display_mode_substate]++;
    150e:	e0 91 60 01 	lds	r30, 0x0160
    1512:	f0 91 61 01 	lds	r31, 0x0161
    1516:	eb 58       	subi	r30, 0x8B	; 139
    1518:	fe 4f       	sbci	r31, 0xFE	; 254
    151a:	80 81       	ld	r24, Z
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 83       	st	Z, r24
    1520:	04 c0       	rjmp	.+8      	; 0x152a <__vector_3+0x6a0>
				break;
			
			case DISPLAY_MODE_CUST_RAND_DIVERGENCE:
				display_mode_state = DISPLAY_MODE_CLOCK;
    1522:	10 92 69 01 	sts	0x0169, r1
    1526:	10 92 68 01 	sts	0x0168, r1
				break;
		}
	}
}
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	bf 91       	pop	r27
    1534:	af 91       	pop	r26
    1536:	9f 91       	pop	r25
    1538:	8f 91       	pop	r24
    153a:	7f 91       	pop	r23
    153c:	6f 91       	pop	r22
    153e:	5f 91       	pop	r21
    1540:	4f 91       	pop	r20
    1542:	3f 91       	pop	r19
    1544:	2f 91       	pop	r18
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <read_blanking_hour>:
	}
}

uint8_t read_blanking_hour()
{
	get_alarm1_time(alarm1, &alarm1_ampm_bit, &clock_mode_12_24);
    1556:	4c e6       	ldi	r20, 0x6C	; 108
    1558:	51 e0       	ldi	r21, 0x01	; 1
    155a:	6b e6       	ldi	r22, 0x6B	; 107
    155c:	71 e0       	ldi	r23, 0x01	; 1
    155e:	83 eb       	ldi	r24, 0xB3	; 179
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 4d 02 	call	0x49a	; 0x49a <get_alarm1_time>
	return alarm1[0]*10+alarm1[1];
    1566:	90 91 b3 01 	lds	r25, 0x01B3
    156a:	20 91 b4 01 	lds	r18, 0x01B4
    156e:	99 0f       	add	r25, r25
    1570:	89 2f       	mov	r24, r25
    1572:	88 0f       	add	r24, r24
    1574:	88 0f       	add	r24, r24
    1576:	89 0f       	add	r24, r25
}
    1578:	82 0f       	add	r24, r18
    157a:	08 95       	ret

0000157c <read_unblanking_hour>:

uint8_t read_unblanking_hour()
{
	get_alarm2_time(alarm2, &alarm2_ampm_bit, &clock_mode_12_24);
    157c:	4c e6       	ldi	r20, 0x6C	; 108
    157e:	51 e0       	ldi	r21, 0x01	; 1
    1580:	62 eb       	ldi	r22, 0xB2	; 178
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	88 ea       	ldi	r24, 0xA8	; 168
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 a9 02 	call	0x552	; 0x552 <get_alarm2_time>
	return alarm2[0]*10+alarm2[1];
    158c:	90 91 a8 01 	lds	r25, 0x01A8
    1590:	20 91 a9 01 	lds	r18, 0x01A9
    1594:	99 0f       	add	r25, r25
    1596:	89 2f       	mov	r24, r25
    1598:	88 0f       	add	r24, r24
    159a:	88 0f       	add	r24, r24
    159c:	89 0f       	add	r24, r25
    159e:	82 0f       	add	r24, r18
    15a0:	08 95       	ret

000015a2 <__vector_11>:
		}
	}
}

ISR(DISPLAY_MODE_INT_VECT)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
	switch(display_mode_state)
    15c4:	80 91 68 01 	lds	r24, 0x0168
    15c8:	90 91 69 01 	lds	r25, 0x0169
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <__vector_11+0x32>
    15d2:	5f c0       	rjmp	.+190    	; 0x1692 <__vector_11+0xf0>
    15d4:	34 f4       	brge	.+12     	; 0x15e2 <__vector_11+0x40>
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	71 f0       	breq	.+28     	; 0x15f6 <__vector_11+0x54>
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <__vector_11+0x3e>
    15de:	4e c0       	rjmp	.+156    	; 0x167c <__vector_11+0xda>
    15e0:	7b c1       	rjmp	.+758    	; 0x18d8 <__vector_11+0x336>
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <__vector_11+0x48>
    15e8:	63 c1       	rjmp	.+710    	; 0x18b0 <__vector_11+0x30e>
    15ea:	0c f4       	brge	.+2      	; 0x15ee <__vector_11+0x4c>
    15ec:	4e c1       	rjmp	.+668    	; 0x188a <__vector_11+0x2e8>
    15ee:	06 97       	sbiw	r24, 0x06	; 6
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <__vector_11+0x52>
    15f2:	6b c1       	rjmp	.+726    	; 0x18ca <__vector_11+0x328>
    15f4:	71 c1       	rjmp	.+738    	; 0x18d8 <__vector_11+0x336>
	{
		case DISPLAY_MODE_CLOCK:
			get_time_bcd(time, &time_ampm_bit, &clock_mode_12_24);
    15f6:	4c e6       	ldi	r20, 0x6C	; 108
    15f8:	51 e0       	ldi	r21, 0x01	; 1
    15fa:	62 e6       	ldi	r22, 0x62	; 98
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	8f e6       	ldi	r24, 0x6F	; 111
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
			if(!(time[4]+time[5]) ||
    1606:	20 91 73 01 	lds	r18, 0x0173
    160a:	80 91 74 01 	lds	r24, 0x0174
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	82 0f       	add	r24, r18
    1612:	91 1d       	adc	r25, r1
    1614:	89 2b       	or	r24, r25
    1616:	81 f0       	breq	.+32     	; 0x1638 <__vector_11+0x96>
			 (time[4] == 2 && time[5] == 9) ||
    1618:	80 91 73 01 	lds	r24, 0x0173
{
	switch(display_mode_state)
	{
		case DISPLAY_MODE_CLOCK:
			get_time_bcd(time, &time_ampm_bit, &clock_mode_12_24);
			if(!(time[4]+time[5]) ||
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	21 f4       	brne	.+8      	; 0x1628 <__vector_11+0x86>
			 (time[4] == 2 && time[5] == 9) ||
    1620:	80 91 74 01 	lds	r24, 0x0174
    1624:	89 30       	cpi	r24, 0x09	; 9
    1626:	41 f0       	breq	.+16     	; 0x1638 <__vector_11+0x96>
			 (time[4] == 3 && time[5] == 4))
    1628:	80 91 73 01 	lds	r24, 0x0173
	switch(display_mode_state)
	{
		case DISPLAY_MODE_CLOCK:
			get_time_bcd(time, &time_ampm_bit, &clock_mode_12_24);
			if(!(time[4]+time[5]) ||
			 (time[4] == 2 && time[5] == 9) ||
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	41 f4       	brne	.+16     	; 0x1640 <__vector_11+0x9e>
			 (time[4] == 3 && time[5] == 4))
    1630:	80 91 74 01 	lds	r24, 0x0174
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	21 f4       	brne	.+8      	; 0x1640 <__vector_11+0x9e>
			{
				global_excercise_flag = 1;	
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 e8 01 	sts	0x01E8, r24
    163e:	4c c1       	rjmp	.+664    	; 0x18d8 <__vector_11+0x336>
			}
			else if(time[4]==3 && (time[5] < 4))
    1640:	80 91 73 01 	lds	r24, 0x0173
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	89 f4       	brne	.+34     	; 0x166a <__vector_11+0xc8>
    1648:	80 91 74 01 	lds	r24, 0x0174
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	68 f4       	brcc	.+26     	; 0x166a <__vector_11+0xc8>
			{
				get_date_bcd(date);
    1650:	8c ea       	ldi	r24, 0xAC	; 172
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 0f 01 	call	0x21e	; 0x21e <get_date_bcd>
				global_excercise_flag = 0;
    1658:	10 92 e8 01 	sts	0x01E8, r1
				generate_digits_date(date, global_digits);
    165c:	65 ec       	ldi	r22, 0xC5	; 197
    165e:	71 e0       	ldi	r23, 0x01	; 1
    1660:	8c ea       	ldi	r24, 0xAC	; 172
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <generate_digits_date>
    1668:	37 c1       	rjmp	.+622    	; 0x18d8 <__vector_11+0x336>
			}			
			else
			{
				global_excercise_flag = 0;
    166a:	10 92 e8 01 	sts	0x01E8, r1
				generate_digits_time(time, global_digits);
    166e:	65 ec       	ldi	r22, 0xC5	; 197
    1670:	71 e0       	ldi	r23, 0x01	; 1
    1672:	8f e6       	ldi	r24, 0x6F	; 111
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <generate_digits_time>
    167a:	2e c1       	rjmp	.+604    	; 0x18d8 <__vector_11+0x336>
			}
			break;
			
		case DISPLAY_MODE_DATE:
			get_date_bcd(date);
    167c:	8c ea       	ldi	r24, 0xAC	; 172
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 0f 01 	call	0x21e	; 0x21e <get_date_bcd>
			generate_digits_date(date, global_digits);				
    1684:	65 ec       	ldi	r22, 0xC5	; 197
    1686:	71 e0       	ldi	r23, 0x01	; 1
    1688:	8c ea       	ldi	r24, 0xAC	; 172
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <generate_digits_date>
			break;
    1690:	23 c1       	rjmp	.+582    	; 0x18d8 <__vector_11+0x336>
			
		case DISPLAY_MODE_SETTINGS:
			switch(display_mode_substate)
    1692:	80 91 60 01 	lds	r24, 0x0160
    1696:	90 91 61 01 	lds	r25, 0x0161
    169a:	8c 30       	cpi	r24, 0x0C	; 12
    169c:	91 05       	cpc	r25, r1
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <__vector_11+0x100>
    16a0:	1b c1       	rjmp	.+566    	; 0x18d8 <__vector_11+0x336>
    16a2:	fc 01       	movw	r30, r24
    16a4:	e2 5b       	subi	r30, 0xB2	; 178
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__tablejump2__>
			{
				case DISPLAY_MODE_SETTINGS_HOURS:
					get_time_bcd(time, &time_ampm_bit, &clock_mode_mmdd_ddmm);
    16ac:	4e e6       	ldi	r20, 0x6E	; 110
    16ae:	51 e0       	ldi	r21, 0x01	; 1
    16b0:	62 e6       	ldi	r22, 0x62	; 98
    16b2:	71 e0       	ldi	r23, 0x01	; 1
    16b4:	8f e6       	ldi	r24, 0x6F	; 111
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_HOURS,
											time_ampm_bit,
											time[0]*10+time[1],
    16bc:	80 91 6f 01 	lds	r24, 0x016F
    16c0:	90 91 70 01 	lds	r25, 0x0170
		case DISPLAY_MODE_SETTINGS:
			switch(display_mode_substate)
			{
				case DISPLAY_MODE_SETTINGS_HOURS:
					get_time_bcd(time, &time_ampm_bit, &clock_mode_mmdd_ddmm);
					generate_digits_settings(DISPLAY_MODE_SETTINGS_HOURS,
    16c4:	60 91 62 01 	lds	r22, 0x0162
    16c8:	88 0f       	add	r24, r24
    16ca:	48 2f       	mov	r20, r24
    16cc:	44 0f       	add	r20, r20
    16ce:	44 0f       	add	r20, r20
    16d0:	84 0f       	add	r24, r20
    16d2:	48 2f       	mov	r20, r24
    16d4:	49 0f       	add	r20, r25
    16d6:	25 ec       	ldi	r18, 0xC5	; 197
    16d8:	31 e0       	ldi	r19, 0x01	; 1
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											time_ampm_bit,
											time[0]*10+time[1],
											global_digits);
					break;
    16e0:	fb c0       	rjmp	.+502    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_MINUTES:
					get_time_bcd(time, &time_ampm_bit, &clock_mode_mmdd_ddmm);
    16e2:	4e e6       	ldi	r20, 0x6E	; 110
    16e4:	51 e0       	ldi	r21, 0x01	; 1
    16e6:	62 e6       	ldi	r22, 0x62	; 98
    16e8:	71 e0       	ldi	r23, 0x01	; 1
    16ea:	8f e6       	ldi	r24, 0x6F	; 111
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_MINUTES,
											0,
											time[2]*10+time[3],
    16f2:	80 91 71 01 	lds	r24, 0x0171
    16f6:	90 91 72 01 	lds	r25, 0x0172
											global_digits);
					break;
			
				case DISPLAY_MODE_SETTINGS_MINUTES:
					get_time_bcd(time, &time_ampm_bit, &clock_mode_mmdd_ddmm);
					generate_digits_settings(DISPLAY_MODE_SETTINGS_MINUTES,
    16fa:	88 0f       	add	r24, r24
    16fc:	48 2f       	mov	r20, r24
    16fe:	44 0f       	add	r20, r20
    1700:	44 0f       	add	r20, r20
    1702:	84 0f       	add	r24, r20
    1704:	48 2f       	mov	r20, r24
    1706:	49 0f       	add	r20, r25
    1708:	25 ec       	ldi	r18, 0xC5	; 197
    170a:	31 e0       	ldi	r19, 0x01	; 1
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											time[2]*10+time[3],
											global_digits);
					break;
    1714:	e1 c0       	rjmp	.+450    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_SECONDS:
					get_time_bcd(time, &time_ampm_bit, &clock_mode_mmdd_ddmm);
    1716:	4e e6       	ldi	r20, 0x6E	; 110
    1718:	51 e0       	ldi	r21, 0x01	; 1
    171a:	62 e6       	ldi	r22, 0x62	; 98
    171c:	71 e0       	ldi	r23, 0x01	; 1
    171e:	8f e6       	ldi	r24, 0x6F	; 111
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 b2 00 	call	0x164	; 0x164 <get_time_bcd>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_SECONDS,
											0,
											time[4]*10+time[5],
    1726:	80 91 73 01 	lds	r24, 0x0173
    172a:	90 91 74 01 	lds	r25, 0x0174
											global_digits);
					break;
			
				case DISPLAY_MODE_SETTINGS_SECONDS:
					get_time_bcd(time, &time_ampm_bit, &clock_mode_mmdd_ddmm);
					generate_digits_settings(DISPLAY_MODE_SETTINGS_SECONDS,
    172e:	88 0f       	add	r24, r24
    1730:	48 2f       	mov	r20, r24
    1732:	44 0f       	add	r20, r20
    1734:	44 0f       	add	r20, r20
    1736:	84 0f       	add	r24, r20
    1738:	48 2f       	mov	r20, r24
    173a:	49 0f       	add	r20, r25
    173c:	25 ec       	ldi	r18, 0xC5	; 197
    173e:	31 e0       	ldi	r19, 0x01	; 1
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											time[4]*10+time[5],
											global_digits);
					break;
    1748:	c7 c0       	rjmp	.+398    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_12_24:
					clock_mode_12_24 = get_mode_12_24();
    174a:	0e 94 2f 02 	call	0x45e	; 0x45e <get_mode_12_24>
    174e:	80 93 6c 01 	sts	0x016C, r24
					if(clock_mode_12_24)
    1752:	80 91 6c 01 	lds	r24, 0x016C
    1756:	88 23       	and	r24, r24
    1758:	41 f0       	breq	.+16     	; 0x176a <__vector_11+0x1c8>
						generate_digits_settings(DISPLAY_MODE_SETTINGS_12_24, 0, 12, global_digits);
    175a:	25 ec       	ldi	r18, 0xC5	; 197
    175c:	31 e0       	ldi	r19, 0x01	; 1
    175e:	4c e0       	ldi	r20, 0x0C	; 12
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
    1768:	b7 c0       	rjmp	.+366    	; 0x18d8 <__vector_11+0x336>
					else
						generate_digits_settings(DISPLAY_MODE_SETTINGS_12_24, 0, 24, global_digits);
    176a:	25 ec       	ldi	r18, 0xC5	; 197
    176c:	31 e0       	ldi	r19, 0x01	; 1
    176e:	48 e1       	ldi	r20, 0x18	; 24
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
    1778:	af c0       	rjmp	.+350    	; 0x18d8 <__vector_11+0x336>
					break;
			
				case DISPLAY_MODE_SETTINGS_MONTH:
					get_date_bcd(date);
    177a:	8c ea       	ldi	r24, 0xAC	; 172
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	0e 94 0f 01 	call	0x21e	; 0x21e <get_date_bcd>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_MONTH,
											0,
											date[0]*10+date[1],
    1782:	80 91 ac 01 	lds	r24, 0x01AC
    1786:	90 91 ad 01 	lds	r25, 0x01AD
						generate_digits_settings(DISPLAY_MODE_SETTINGS_12_24, 0, 24, global_digits);
					break;
			
				case DISPLAY_MODE_SETTINGS_MONTH:
					get_date_bcd(date);
					generate_digits_settings(DISPLAY_MODE_SETTINGS_MONTH,
    178a:	88 0f       	add	r24, r24
    178c:	48 2f       	mov	r20, r24
    178e:	44 0f       	add	r20, r20
    1790:	44 0f       	add	r20, r20
    1792:	84 0f       	add	r24, r20
    1794:	48 2f       	mov	r20, r24
    1796:	49 0f       	add	r20, r25
    1798:	25 ec       	ldi	r18, 0xC5	; 197
    179a:	31 e0       	ldi	r19, 0x01	; 1
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	84 e0       	ldi	r24, 0x04	; 4
    17a0:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											date[0]*10+date[1],
											global_digits);
					break;
    17a4:	99 c0       	rjmp	.+306    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_DAY:
					get_date_bcd(date);
    17a6:	8c ea       	ldi	r24, 0xAC	; 172
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	0e 94 0f 01 	call	0x21e	; 0x21e <get_date_bcd>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_DAY,
											0,
											date[2]*10+date[3],
    17ae:	80 91 ae 01 	lds	r24, 0x01AE
    17b2:	90 91 af 01 	lds	r25, 0x01AF
											global_digits);
					break;
			
				case DISPLAY_MODE_SETTINGS_DAY:
					get_date_bcd(date);
					generate_digits_settings(DISPLAY_MODE_SETTINGS_DAY,
    17b6:	88 0f       	add	r24, r24
    17b8:	48 2f       	mov	r20, r24
    17ba:	44 0f       	add	r20, r20
    17bc:	44 0f       	add	r20, r20
    17be:	84 0f       	add	r24, r20
    17c0:	48 2f       	mov	r20, r24
    17c2:	49 0f       	add	r20, r25
    17c4:	25 ec       	ldi	r18, 0xC5	; 197
    17c6:	31 e0       	ldi	r19, 0x01	; 1
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											date[2]*10+date[3],
											global_digits);
					break;
    17d0:	83 c0       	rjmp	.+262    	; 0x18d8 <__vector_11+0x336>
					
				case DISPLAY_MODE_SETTINGS_YEAR:
					get_date_bcd(date);
    17d2:	8c ea       	ldi	r24, 0xAC	; 172
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	0e 94 0f 01 	call	0x21e	; 0x21e <get_date_bcd>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_YEAR,
											0,
											date[4]*10+date[5],
    17da:	80 91 b0 01 	lds	r24, 0x01B0
    17de:	90 91 b1 01 	lds	r25, 0x01B1
											global_digits);
					break;
					
				case DISPLAY_MODE_SETTINGS_YEAR:
					get_date_bcd(date);
					generate_digits_settings(DISPLAY_MODE_SETTINGS_YEAR,
    17e2:	88 0f       	add	r24, r24
    17e4:	48 2f       	mov	r20, r24
    17e6:	44 0f       	add	r20, r20
    17e8:	44 0f       	add	r20, r20
    17ea:	84 0f       	add	r24, r20
    17ec:	48 2f       	mov	r20, r24
    17ee:	49 0f       	add	r20, r25
    17f0:	25 ec       	ldi	r18, 0xC5	; 197
    17f2:	31 e0       	ldi	r19, 0x01	; 1
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	86 e0       	ldi	r24, 0x06	; 6
    17f8:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											date[4]*10+date[5],
											global_digits);
					break;
    17fc:	6d c0       	rjmp	.+218    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_MMDD_DDMM:
					if(clock_mode_mmdd_ddmm)
    17fe:	80 91 6e 01 	lds	r24, 0x016E
    1802:	88 23       	and	r24, r24
    1804:	41 f0       	breq	.+16     	; 0x1816 <__vector_11+0x274>
						generate_digits_settings(DISPLAY_MODE_SETTINGS_MMDD_DDMM, 0, 1, global_digits);
    1806:	25 ec       	ldi	r18, 0xC5	; 197
    1808:	31 e0       	ldi	r19, 0x01	; 1
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	87 e0       	ldi	r24, 0x07	; 7
    1810:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
    1814:	61 c0       	rjmp	.+194    	; 0x18d8 <__vector_11+0x336>
					else
						generate_digits_settings(DISPLAY_MODE_SETTINGS_MMDD_DDMM, 0, 0, global_digits);
    1816:	25 ec       	ldi	r18, 0xC5	; 197
    1818:	31 e0       	ldi	r19, 0x01	; 1
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	87 e0       	ldi	r24, 0x07	; 7
    1820:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
    1824:	59 c0       	rjmp	.+178    	; 0x18d8 <__vector_11+0x336>
					break;
			
				case DISPLAY_MODE_SETTINGS_BLANKING_HOUR:
					blanking_hour = read_blanking_hour();
    1826:	0e 94 ab 0a 	call	0x1556	; 0x1556 <read_blanking_hour>
    182a:	80 93 6a 01 	sts	0x016A, r24
					generate_digits_settings(DISPLAY_MODE_SETTINGS_BLANKING_HOUR,
    182e:	40 91 6a 01 	lds	r20, 0x016A
    1832:	60 91 6b 01 	lds	r22, 0x016B
    1836:	25 ec       	ldi	r18, 0xC5	; 197
    1838:	31 e0       	ldi	r19, 0x01	; 1
    183a:	88 e0       	ldi	r24, 0x08	; 8
    183c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											alarm1_ampm_bit,
											blanking_hour,
											global_digits);
					break;
    1840:	4b c0       	rjmp	.+150    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_UNBLANKING_HOUR:
					unblanking_hour = read_unblanking_hour();
    1842:	0e 94 be 0a 	call	0x157c	; 0x157c <read_unblanking_hour>
    1846:	80 93 67 01 	sts	0x0167, r24
					generate_digits_settings(DISPLAY_MODE_SETTINGS_UNBLANKING_HOUR,
    184a:	40 91 67 01 	lds	r20, 0x0167
    184e:	60 91 6b 01 	lds	r22, 0x016B
    1852:	25 ec       	ldi	r18, 0xC5	; 197
    1854:	31 e0       	ldi	r19, 0x01	; 1
    1856:	89 e0       	ldi	r24, 0x09	; 9
    1858:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											alarm1_ampm_bit,
											unblanking_hour,
											global_digits);
					break;
    185c:	3d c0       	rjmp	.+122    	; 0x18d8 <__vector_11+0x336>
					
				case DISPLAY_MODE_SETTINGS_BRIGHTNESS:
					generate_digits_settings(DISPLAY_MODE_SETTINGS_BRIGHTNESS,
    185e:	40 91 e5 01 	lds	r20, 0x01E5
    1862:	25 ec       	ldi	r18, 0xC5	; 197
    1864:	31 e0       	ldi	r19, 0x01	; 1
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	8a e0       	ldi	r24, 0x0A	; 10
    186a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											global_nixie_brightness,
											global_digits);
					break;
    186e:	34 c0       	rjmp	.+104    	; 0x18d8 <__vector_11+0x336>
			
				case DISPLAY_MODE_SETTINGS_OFFSET_ADJUST:
					get_offset_adjust(&offset_adjust);
    1870:	8d e6       	ldi	r24, 0x6D	; 109
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 79 06 	call	0xcf2	; 0xcf2 <get_offset_adjust>
					generate_digits_settings(DISPLAY_MODE_SETTINGS_OFFSET_ADJUST,
    1878:	40 91 6d 01 	lds	r20, 0x016D
    187c:	25 ec       	ldi	r18, 0xC5	; 197
    187e:	31 e0       	ldi	r19, 0x01	; 1
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	8b e0       	ldi	r24, 0x0B	; 11
    1884:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <generate_digits_settings>
											0,
											offset_adjust,
											global_digits);
					break;
    1888:	27 c0       	rjmp	.+78     	; 0x18d8 <__vector_11+0x336>
			}
			break;
			
		case DISPLAY_MODE_PROG_DIVERGENCE:

			generate_digits_divergence(prog_divergence[display_mode_substate], global_digits);
    188a:	e0 91 60 01 	lds	r30, 0x0160
    188e:	f0 91 61 01 	lds	r31, 0x0161
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	e4 58       	subi	r30, 0x84	; 132
    189c:	fe 4f       	sbci	r31, 0xFE	; 254
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	45 ec       	ldi	r20, 0xC5	; 197
    18a8:	51 e0       	ldi	r21, 0x01	; 1
    18aa:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <generate_digits_divergence>
			break;
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <__vector_11+0x336>
		
		case DISPLAY_MODE_RAND_DIVERGENCE:
			generate_digits_divergence(divergence_rand, global_digits);
    18b0:	60 91 63 01 	lds	r22, 0x0163
    18b4:	70 91 64 01 	lds	r23, 0x0164
    18b8:	80 91 65 01 	lds	r24, 0x0165
    18bc:	90 91 66 01 	lds	r25, 0x0166
    18c0:	45 ec       	ldi	r20, 0xC5	; 197
    18c2:	51 e0       	ldi	r21, 0x01	; 1
    18c4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <generate_digits_divergence>
			break;
    18c8:	07 c0       	rjmp	.+14     	; 0x18d8 <__vector_11+0x336>
		
		case DISPLAY_MODE_CUST_RAND_DIVERGENCE:
			// PLACEHOLDER
			generate_digits_divergence(0, global_digits);
    18ca:	45 ec       	ldi	r20, 0xC5	; 197
    18cc:	51 e0       	ldi	r21, 0x01	; 1
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	cb 01       	movw	r24, r22
    18d4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <generate_digits_divergence>
	}
}
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <init_display_vars>:



void init_display_vars(void)
{
	global_nixie_brightness_counter = 0;
    18fa:	10 92 e6 01 	sts	0x01E6, r1
	global_nixie_brightness = 7;
    18fe:	87 e0       	ldi	r24, 0x07	; 7
    1900:	80 93 e5 01 	sts	0x01E5, r24
	int i;
	for(i=0; i<12; i++)
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
		global_bitstream[i] = 0;
    1908:	fc 01       	movw	r30, r24
    190a:	e7 54       	subi	r30, 0x47	; 71
    190c:	fe 4f       	sbci	r31, 0xFE	; 254
    190e:	10 82       	st	Z, r1
void init_display_vars(void)
{
	global_nixie_brightness_counter = 0;
	global_nixie_brightness = 7;
	int i;
	for(i=0; i<12; i++)
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	8c 30       	cpi	r24, 0x0C	; 12
    1914:	91 05       	cpc	r25, r1
    1916:	c1 f7       	brne	.-16     	; 0x1908 <init_display_vars+0xe>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
		global_bitstream[i] = 0;
	for(i=0; i<8; i++)
		global_mapped_digits[i] = 0;
    191c:	fc 01       	movw	r30, r24
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	eb 52       	subi	r30, 0x2B	; 43
    1924:	fe 4f       	sbci	r31, 0xFE	; 254
    1926:	11 82       	std	Z+1, r1	; 0x01
    1928:	10 82       	st	Z, r1
	global_nixie_brightness_counter = 0;
	global_nixie_brightness = 7;
	int i;
	for(i=0; i<12; i++)
		global_bitstream[i] = 0;
	for(i=0; i<8; i++)
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	88 30       	cpi	r24, 0x08	; 8
    192e:	91 05       	cpc	r25, r1
    1930:	a9 f7       	brne	.-22     	; 0x191c <init_display_vars+0x22>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
		global_mapped_digits[i] = 0;
	for(i=0; i<8; i++)
		global_digits[i] = 0;
    1936:	fc 01       	movw	r30, r24
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	eb 53       	subi	r30, 0x3B	; 59
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	11 82       	std	Z+1, r1	; 0x01
    1942:	10 82       	st	Z, r1
	int i;
	for(i=0; i<12; i++)
		global_bitstream[i] = 0;
	for(i=0; i<8; i++)
		global_mapped_digits[i] = 0;
	for(i=0; i<8; i++)
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	88 30       	cpi	r24, 0x08	; 8
    1948:	91 05       	cpc	r25, r1
    194a:	a9 f7       	brne	.-22     	; 0x1936 <init_display_vars+0x3c>
		global_digits[i] = 0;
		
	global_excercise_flag = 0;
    194c:	10 92 e8 01 	sts	0x01E8, r1
	global_excercise_counter = 0;
    1950:	10 92 e7 01 	sts	0x01E7, r1
    1954:	08 95       	ret

00001956 <display_refresh_timer_init>:
}


void display_refresh_timer_init(void)
{
	OCR0A = 15;
    1956:	8f e0       	ldi	r24, 0x0F	; 15
    1958:	87 bd       	out	0x27, r24	; 39
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
    195a:	84 b5       	in	r24, 0x24	; 36
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00) | (1 << CS02);
    1960:	85 e0       	ldi	r24, 0x05	; 5
    1962:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 = (1 << OCF0A);
    196a:	85 bb       	out	0x15, r24	; 21
	sei();
    196c:	78 94       	sei
    196e:	08 95       	ret

00001970 <latchHold>:
}

void latchHold(void)
{
	clearBit(PORT_LATCHENABLE, BV_LATCHENABLE);
    1970:	5e 98       	cbi	0x0b, 6	; 11
    1972:	08 95       	ret

00001974 <latchDump>:
}

void latchDump(void)
{
	setBit(PORT_LATCHENABLE, BV_LATCHENABLE);
    1974:	5e 9a       	sbi	0x0b, 6	; 11
    1976:	08 95       	ret

00001978 <cycleClock>:
}

void cycleClock(void)
{
	setBit(PORT_CLOCK, BV_CLOCK);
    1978:	40 9a       	sbi	0x08, 0	; 8
	clearBit(PORT_CLOCK, BV_CLOCK);
    197a:	40 98       	cbi	0x08, 0	; 8
	setBit(PORT_CLOCK, BV_CLOCK);
    197c:	40 9a       	sbi	0x08, 0	; 8
    197e:	08 95       	ret

00001980 <display_excercise>:
}

void display_excercise(int* digits)
{
    1980:	fc 01       	movw	r30, r24
	int i;

	for(i=0;i<8;i++)
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(digits[i]>=11)
    1986:	20 81       	ld	r18, Z
    1988:	31 81       	ldd	r19, Z+1	; 0x01
    198a:	2b 30       	cpi	r18, 0x0B	; 11
    198c:	31 05       	cpc	r19, r1
    198e:	1c f0       	brlt	.+6      	; 0x1996 <display_excercise+0x16>
		{
			digits[i]=0;
    1990:	11 82       	std	Z+1, r1	; 0x01
    1992:	10 82       	st	Z, r1
    1994:	04 c0       	rjmp	.+8      	; 0x199e <display_excercise+0x1e>
		}
		else
		{
			digits[i]++;
    1996:	2f 5f       	subi	r18, 0xFF	; 255
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	31 83       	std	Z+1, r19	; 0x01
    199c:	20 83       	st	Z, r18

void display_excercise(int* digits)
{
	int i;

	for(i=0;i<8;i++)
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	32 96       	adiw	r30, 0x02	; 2
    19a2:	88 30       	cpi	r24, 0x08	; 8
    19a4:	91 05       	cpc	r25, r1
    19a6:	79 f7       	brne	.-34     	; 0x1986 <display_excercise+0x6>
		else
		{
			digits[i]++;
		}
	}
}
    19a8:	08 95       	ret

000019aa <generate_digits_divergence>:

void generate_digits_divergence(uint32_t divergence, int* digits)
{
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	7a 01       	movw	r14, r20
    19c0:	8a 01       	movw	r16, r20
    19c2:	c1 e0       	ldi	r28, 0x01	; 1
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0; i < 8; i++)
	{
		if(i!=6){
			digits[7-i] = divergence%(long)10;
    19c6:	0f 2e       	mov	r0, r31
    19c8:	fa e0       	ldi	r31, 0x0A	; 10
    19ca:	8f 2e       	mov	r8, r31
    19cc:	91 2c       	mov	r9, r1
    19ce:	a1 2c       	mov	r10, r1
    19d0:	b1 2c       	mov	r11, r1
    19d2:	f0 2d       	mov	r31, r0
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <generate_digits_divergence+0x32>
    19d6:	21 96       	adiw	r28, 0x01	; 1
    19d8:	02 50       	subi	r16, 0x02	; 2
    19da:	11 09       	sbc	r17, r1
void generate_digits_divergence(uint32_t divergence, int* digits)
{
	int i;
	for(i=0; i < 8; i++)
	{
		if(i!=6){
    19dc:	c7 30       	cpi	r28, 0x07	; 7
    19de:	d1 05       	cpc	r29, r1
    19e0:	d1 f3       	breq	.-12     	; 0x19d6 <generate_digits_divergence+0x2c>
			digits[7-i] = divergence%(long)10;
    19e2:	a5 01       	movw	r20, r10
    19e4:	94 01       	movw	r18, r8
    19e6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    19ea:	f8 01       	movw	r30, r16
    19ec:	77 87       	std	Z+15, r23	; 0x0f
    19ee:	66 87       	std	Z+14, r22	; 0x0e
			divergence = divergence/10;
    19f0:	62 2f       	mov	r22, r18
    19f2:	73 2f       	mov	r23, r19
    19f4:	84 2f       	mov	r24, r20
    19f6:	95 2f       	mov	r25, r21
}

void generate_digits_divergence(uint32_t divergence, int* digits)
{
	int i;
	for(i=0; i < 8; i++)
    19f8:	c8 30       	cpi	r28, 0x08	; 8
    19fa:	d1 05       	cpc	r29, r1
    19fc:	64 f3       	brlt	.-40     	; 0x19d6 <generate_digits_divergence+0x2c>
		if(i!=6){
			digits[7-i] = divergence%(long)10;
			divergence = divergence/10;
		}	
	}
	digits[1] = 11;
    19fe:	8b e0       	ldi	r24, 0x0B	; 11
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	f7 01       	movw	r30, r14
    1a04:	93 83       	std	Z+3, r25	; 0x03
    1a06:	82 83       	std	Z+2, r24	; 0x02
	
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	9f 90       	pop	r9
    1a1a:	8f 90       	pop	r8
    1a1c:	08 95       	ret

00001a1e <generate_digits_time>:

void generate_digits_time(uint8_t time[], int* digits)
{
    1a1e:	fc 01       	movw	r30, r24
    1a20:	db 01       	movw	r26, r22
	digits[0] = time[0];
    1a22:	80 81       	ld	r24, Z
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
	digits[1] = time[1];
    1a2c:	81 81       	ldd	r24, Z+1	; 0x01
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	13 96       	adiw	r26, 0x03	; 3
    1a32:	9c 93       	st	X, r25
    1a34:	8e 93       	st	-X, r24
    1a36:	12 97       	sbiw	r26, 0x02	; 2
	digits[2] = 10+time[5]%2;
    1a38:	85 81       	ldd	r24, Z+5	; 0x05
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	41 70       	andi	r20, 0x01	; 1
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	46 5f       	subi	r20, 0xF6	; 246
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	15 96       	adiw	r26, 0x05	; 5
    1a46:	5c 93       	st	X, r21
    1a48:	4e 93       	st	-X, r20
    1a4a:	14 97       	sbiw	r26, 0x04	; 4
	digits[3] = time[2];
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	17 96       	adiw	r26, 0x07	; 7
    1a52:	9c 93       	st	X, r25
    1a54:	8e 93       	st	-X, r24
    1a56:	16 97       	sbiw	r26, 0x06	; 6
	digits[4] = time[3];
    1a58:	83 81       	ldd	r24, Z+3	; 0x03
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	19 96       	adiw	r26, 0x09	; 9
    1a5e:	9c 93       	st	X, r25
    1a60:	8e 93       	st	-X, r24
    1a62:	18 97       	sbiw	r26, 0x08	; 8
	digits[5] = 10+time[5]%2;
    1a64:	85 81       	ldd	r24, Z+5	; 0x05
    1a66:	28 2f       	mov	r18, r24
    1a68:	21 70       	andi	r18, 0x01	; 1
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	26 5f       	subi	r18, 0xF6	; 246
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	1b 96       	adiw	r26, 0x0b	; 11
    1a72:	3c 93       	st	X, r19
    1a74:	2e 93       	st	-X, r18
    1a76:	1a 97       	sbiw	r26, 0x0a	; 10
	digits[6] = time[4];
    1a78:	84 81       	ldd	r24, Z+4	; 0x04
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	1d 96       	adiw	r26, 0x0d	; 13
    1a7e:	9c 93       	st	X, r25
    1a80:	8e 93       	st	-X, r24
    1a82:	1c 97       	sbiw	r26, 0x0c	; 12
	digits[7] = time[5];
    1a84:	85 81       	ldd	r24, Z+5	; 0x05
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	1f 96       	adiw	r26, 0x0f	; 15
    1a8a:	9c 93       	st	X, r25
    1a8c:	8e 93       	st	-X, r24
    1a8e:	1e 97       	sbiw	r26, 0x0e	; 14
    1a90:	08 95       	ret

00001a92 <generate_digits_settings>:
}

void generate_digits_settings(uint8_t setting, uint8_t ampm, uint8_t value, int* digits)
{
    1a92:	cf 93       	push	r28
    1a94:	c6 2f       	mov	r28, r22
    1a96:	f9 01       	movw	r30, r18
	digits[0] = (setting+1)/10;
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	6a e0       	ldi	r22, 0x0A	; 10
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__divmodhi4>
    1aa4:	71 83       	std	Z+1, r23	; 0x01
    1aa6:	60 83       	st	Z, r22
	digits[1] = (setting+1)%10;
    1aa8:	93 83       	std	Z+3, r25	; 0x03
    1aaa:	82 83       	std	Z+2, r24	; 0x02
	
	int i;
	for(i=2;i<5;i++)
		digits[i] = 12;
    1aac:	8c e0       	ldi	r24, 0x0C	; 12
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	95 83       	std	Z+5, r25	; 0x05
    1ab2:	84 83       	std	Z+4, r24	; 0x04
    1ab4:	97 83       	std	Z+7, r25	; 0x07
    1ab6:	86 83       	std	Z+6, r24	; 0x06
    1ab8:	91 87       	std	Z+9, r25	; 0x09
    1aba:	80 87       	std	Z+8, r24	; 0x08
	
	if(!ampm)
    1abc:	c1 11       	cpse	r28, r1
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <generate_digits_settings+0x34>
		digits[5] = 12;
    1ac0:	93 87       	std	Z+11, r25	; 0x0b
    1ac2:	82 87       	std	Z+10, r24	; 0x0a
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <generate_digits_settings+0x3c>
	else
		digits[5] = 11;
    1ac6:	8b e0       	ldi	r24, 0x0B	; 11
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	93 87       	std	Z+11, r25	; 0x0b
    1acc:	82 87       	std	Z+10, r24	; 0x0a
		
	digits[6] = value/10;
    1ace:	2d ec       	ldi	r18, 0xCD	; 205
    1ad0:	42 9f       	mul	r20, r18
    1ad2:	21 2d       	mov	r18, r1
    1ad4:	11 24       	eor	r1, r1
    1ad6:	26 95       	lsr	r18
    1ad8:	26 95       	lsr	r18
    1ada:	26 95       	lsr	r18
    1adc:	82 2f       	mov	r24, r18
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	95 87       	std	Z+13, r25	; 0x0d
    1ae2:	84 87       	std	Z+12, r24	; 0x0c
	digits[7] = value%10;
    1ae4:	82 2f       	mov	r24, r18
    1ae6:	88 0f       	add	r24, r24
    1ae8:	98 2f       	mov	r25, r24
    1aea:	99 0f       	add	r25, r25
    1aec:	99 0f       	add	r25, r25
    1aee:	89 0f       	add	r24, r25
    1af0:	48 1b       	sub	r20, r24
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	57 87       	std	Z+15, r21	; 0x0f
    1af6:	46 87       	std	Z+14, r20	; 0x0e
}
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <generate_digits_date>:

void generate_digits_date(uint8_t date[], int* digits)
{
    1afc:	dc 01       	movw	r26, r24
    1afe:	fb 01       	movw	r30, r22
	digits[0] = date[0];
    1b00:	8c 91       	ld	r24, X
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
	digits[1] = date[1];
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	8c 91       	ld	r24, X
    1b0c:	11 97       	sbiw	r26, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	93 83       	std	Z+3, r25	; 0x03
    1b12:	82 83       	std	Z+2, r24	; 0x02
	digits[2] = 12;
    1b14:	8c e0       	ldi	r24, 0x0C	; 12
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	95 83       	std	Z+5, r25	; 0x05
    1b1a:	84 83       	std	Z+4, r24	; 0x04
	digits[3] = date[2];
    1b1c:	12 96       	adiw	r26, 0x02	; 2
    1b1e:	2c 91       	ld	r18, X
    1b20:	12 97       	sbiw	r26, 0x02	; 2
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	37 83       	std	Z+7, r19	; 0x07
    1b26:	26 83       	std	Z+6, r18	; 0x06
	digits[4] = date[3];
    1b28:	13 96       	adiw	r26, 0x03	; 3
    1b2a:	2c 91       	ld	r18, X
    1b2c:	13 97       	sbiw	r26, 0x03	; 3
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	31 87       	std	Z+9, r19	; 0x09
    1b32:	20 87       	std	Z+8, r18	; 0x08
	digits[5] = 12;
    1b34:	93 87       	std	Z+11, r25	; 0x0b
    1b36:	82 87       	std	Z+10, r24	; 0x0a
	digits[6] = date[4];
    1b38:	14 96       	adiw	r26, 0x04	; 4
    1b3a:	8c 91       	ld	r24, X
    1b3c:	14 97       	sbiw	r26, 0x04	; 4
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	95 87       	std	Z+13, r25	; 0x0d
    1b42:	84 87       	std	Z+12, r24	; 0x0c
	digits[7] = date[5];
    1b44:	15 96       	adiw	r26, 0x05	; 5
    1b46:	8c 91       	ld	r24, X
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	97 87       	std	Z+15, r25	; 0x0f
    1b4c:	86 87       	std	Z+14, r24	; 0x0e
    1b4e:	08 95       	ret

00001b50 <map_digits>:
}

void map_digits(int digits[], int mapped_digits[])
{
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	dc 01       	movw	r26, r24
    1b56:	e6 2f       	mov	r30, r22
    1b58:	f7 2f       	mov	r31, r23
    1b5a:	27 e0       	ldi	r18, 0x07	; 7
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
	};
	
	int i;
	for(i=0;i<8;i++)
	{
		if(digits[i]!=12)
    1b5e:	4d 91       	ld	r20, X+
    1b60:	5d 91       	ld	r21, X+
    1b62:	4c 30       	cpi	r20, 0x0C	; 12
    1b64:	51 05       	cpc	r21, r1
    1b66:	99 f0       	breq	.+38     	; 0x1b8e <map_digits+0x3e>
			mapped_digits[i] = Nixie[7-i][digits[i]];
    1b68:	e9 01       	movw	r28, r18
    1b6a:	cc 0f       	add	r28, r28
    1b6c:	dd 1f       	adc	r29, r29
    1b6e:	c2 0f       	add	r28, r18
    1b70:	d3 1f       	adc	r29, r19
    1b72:	cc 0f       	add	r28, r28
    1b74:	dd 1f       	adc	r29, r29
    1b76:	cc 0f       	add	r28, r28
    1b78:	dd 1f       	adc	r29, r29
    1b7a:	4c 0f       	add	r20, r28
    1b7c:	5d 1f       	adc	r21, r29
    1b7e:	ea 01       	movw	r28, r20
    1b80:	c0 50       	subi	r28, 0x00	; 0
    1b82:	df 4f       	sbci	r29, 0xFF	; 255
    1b84:	88 81       	ld	r24, Y
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <map_digits+0x42>
		else
			mapped_digits[i] = 0;
    1b8e:	11 82       	std	Z+1, r1	; 0x01
    1b90:	10 82       	st	Z, r1
    1b92:	21 50       	subi	r18, 0x01	; 1
    1b94:	31 09       	sbc	r19, r1
    1b96:	32 96       	adiw	r30, 0x02	; 2
		{74, 83, 79, 81, 82, 80, 78, 76, 77, 75, 84, 73},
		{85, 95, 94, 93, 92, 91, 90, 89, 88, 87, 96, 86}
	};
	
	int i;
	for(i=0;i<8;i++)
    1b98:	2f 3f       	cpi	r18, 0xFF	; 255
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	38 07       	cpc	r19, r24
    1b9e:	f9 f6       	brne	.-66     	; 0x1b5e <map_digits+0xe>
		if(digits[i]!=12)
			mapped_digits[i] = Nixie[7-i][digits[i]];
		else
			mapped_digits[i] = 0;
	}
}
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <generate_bitstream>:

void generate_bitstream(uint8_t bitstream[], int digits[])
{
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	fc 01       	movw	r30, r24
	int i;
	for(i = 0; i < 12; i++)
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
		bitstream[i] = 0x00;
    1bb4:	11 92       	st	Z+, r1
}

void generate_bitstream(uint8_t bitstream[], int digits[])
{
	int i;
	for(i = 0; i < 12; i++)
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	2c 30       	cpi	r18, 0x0C	; 12
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	d1 f7       	brne	.-12     	; 0x1bb4 <generate_bitstream+0xe>
    1bc0:	e6 2f       	mov	r30, r22
    1bc2:	f7 2f       	mov	r31, r23
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
		bitstream[i] = 0x00;
	for(i = 0; i < 8; i++)
		if(digits[i])
			setBit(bitstream[(96-digits[i])/8], (digits[i]-1)%8);
    1bc8:	00 e6       	ldi	r16, 0x60	; 96
    1bca:	10 e0       	ldi	r17, 0x00	; 0
    1bcc:	c1 e0       	ldi	r28, 0x01	; 1
    1bce:	d0 e0       	ldi	r29, 0x00	; 0
{
	int i;
	for(i = 0; i < 12; i++)
		bitstream[i] = 0x00;
	for(i = 0; i < 8; i++)
		if(digits[i])
    1bd0:	41 91       	ld	r20, Z+
    1bd2:	51 91       	ld	r21, Z+
    1bd4:	41 15       	cp	r20, r1
    1bd6:	51 05       	cpc	r21, r1
    1bd8:	31 f1       	breq	.+76     	; 0x1c26 <generate_bitstream+0x80>
			setBit(bitstream[(96-digits[i])/8], (digits[i]-1)%8);
    1bda:	d8 01       	movw	r26, r16
    1bdc:	a4 1b       	sub	r26, r20
    1bde:	b5 0b       	sbc	r27, r21
    1be0:	bd 01       	movw	r22, r26
    1be2:	12 f4       	brpl	.+4      	; 0x1be8 <generate_bitstream+0x42>
    1be4:	69 5f       	subi	r22, 0xF9	; 249
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	db 01       	movw	r26, r22
    1bea:	b5 95       	asr	r27
    1bec:	a7 95       	ror	r26
    1bee:	b5 95       	asr	r27
    1bf0:	a7 95       	ror	r26
    1bf2:	b5 95       	asr	r27
    1bf4:	a7 95       	ror	r26
    1bf6:	a8 0f       	add	r26, r24
    1bf8:	b9 1f       	adc	r27, r25
    1bfa:	41 50       	subi	r20, 0x01	; 1
    1bfc:	51 09       	sbc	r21, r1
    1bfe:	47 70       	andi	r20, 0x07	; 7
    1c00:	50 78       	andi	r21, 0x80	; 128
    1c02:	55 23       	and	r21, r21
    1c04:	34 f4       	brge	.+12     	; 0x1c12 <generate_bitstream+0x6c>
    1c06:	41 50       	subi	r20, 0x01	; 1
    1c08:	51 09       	sbc	r21, r1
    1c0a:	48 6f       	ori	r20, 0xF8	; 248
    1c0c:	5f 6f       	ori	r21, 0xFF	; 255
    1c0e:	4f 5f       	subi	r20, 0xFF	; 255
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	be 01       	movw	r22, r28
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <generate_bitstream+0x74>
    1c16:	66 0f       	add	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	4a 95       	dec	r20
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <generate_bitstream+0x70>
    1c1e:	ab 01       	movw	r20, r22
    1c20:	5c 91       	ld	r21, X
    1c22:	45 2b       	or	r20, r21
    1c24:	4c 93       	st	X, r20
void generate_bitstream(uint8_t bitstream[], int digits[])
{
	int i;
	for(i = 0; i < 12; i++)
		bitstream[i] = 0x00;
	for(i = 0; i < 8; i++)
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	28 30       	cpi	r18, 0x08	; 8
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f6       	brne	.-96     	; 0x1bd0 <generate_bitstream+0x2a>
		if(digits[i])
			setBit(bitstream[(96-digits[i])/8], (digits[i]-1)%8);
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	08 95       	ret

00001c3a <load_latches>:

void load_latches(char bitstream[12])
{
    1c3a:	af 92       	push	r10
    1c3c:	bf 92       	push	r11
    1c3e:	cf 92       	push	r12
    1c40:	df 92       	push	r13
    1c42:	ef 92       	push	r14
    1c44:	ff 92       	push	r15
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	6c 01       	movw	r12, r24
	latchHold();
    1c50:	0e 94 b8 0c 	call	0x1970	; 0x1970 <latchHold>
	int i, j;
	for(i = 0; i < 12; i++)
    1c54:	e1 2c       	mov	r14, r1
    1c56:	f1 2c       	mov	r15, r1
		if(digits[i])
			setBit(bitstream[(96-digits[i])/8], (digits[i]-1)%8);
}

void load_latches(char bitstream[12])
{
    1c58:	0f 2e       	mov	r0, r31
    1c5a:	f7 e0       	ldi	r31, 0x07	; 7
    1c5c:	af 2e       	mov	r10, r31
    1c5e:	f0 2d       	mov	r31, r0
    1c60:	b1 2c       	mov	r11, r1
    1c62:	1b c0       	rjmp	.+54     	; 0x1c9a <load_latches+0x60>
	int i, j;
	for(i = 0; i < 12; i++)
	{
		for(j = 7; j >= 0; j--)
		{
			if(!(bitstream[i] & (1 << j)))
    1c64:	f8 01       	movw	r30, r16
    1c66:	20 81       	ld	r18, Z
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	0c 2e       	mov	r0, r28
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <load_latches+0x38>
    1c6e:	35 95       	asr	r19
    1c70:	27 95       	ror	r18
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <load_latches+0x34>
    1c76:	20 fd       	sbrc	r18, 0
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <load_latches+0x48>
			{
				clearBit(PORT_DATA, BV_DATA);
    1c7a:	41 98       	cbi	0x08, 1	; 8
				cycleClock();
    1c7c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <cycleClock>
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <load_latches+0x4e>
			}
			else
			{
				setBit(PORT_DATA, BV_DATA);
    1c82:	41 9a       	sbi	0x08, 1	; 8
				cycleClock();
    1c84:	0e 94 bc 0c 	call	0x1978	; 0x1978 <cycleClock>
{
	latchHold();
	int i, j;
	for(i = 0; i < 12; i++)
	{
		for(j = 7; j >= 0; j--)
    1c88:	21 97       	sbiw	r28, 0x01	; 1
    1c8a:	60 f7       	brcc	.-40     	; 0x1c64 <load_latches+0x2a>

void load_latches(char bitstream[12])
{
	latchHold();
	int i, j;
	for(i = 0; i < 12; i++)
    1c8c:	ef ef       	ldi	r30, 0xFF	; 255
    1c8e:	ee 1a       	sub	r14, r30
    1c90:	fe 0a       	sbc	r15, r30
    1c92:	fc e0       	ldi	r31, 0x0C	; 12
    1c94:	ef 16       	cp	r14, r31
    1c96:	f1 04       	cpc	r15, r1
    1c98:	31 f0       	breq	.+12     	; 0x1ca6 <load_latches+0x6c>
		if(digits[i])
			setBit(bitstream[(96-digits[i])/8], (digits[i]-1)%8);
}

void load_latches(char bitstream[12])
{
    1c9a:	ca 2d       	mov	r28, r10
    1c9c:	db 2d       	mov	r29, r11
    1c9e:	86 01       	movw	r16, r12
    1ca0:	0e 0d       	add	r16, r14
    1ca2:	1f 1d       	adc	r17, r15
    1ca4:	df cf       	rjmp	.-66     	; 0x1c64 <load_latches+0x2a>
				setBit(PORT_DATA, BV_DATA);
				cycleClock();
			}
		}
	}
	latchDump();
    1ca6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <latchDump>
	latchHold();
    1caa:	0e 94 b8 0c 	call	0x1970	; 0x1970 <latchHold>
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	bf 90       	pop	r11
    1cc0:	af 90       	pop	r10
    1cc2:	08 95       	ret

00001cc4 <blankDisplay>:

void blankDisplay(void)
{
	clearBit(PORT_BLANKING, BV_BLANKING);
    1cc4:	42 98       	cbi	0x08, 2	; 8
	setBit(PORT_POLARITY, BV_POLARITY);
    1cc6:	5f 9a       	sbi	0x0b, 7	; 11
    1cc8:	08 95       	ret

00001cca <unblankDisplay>:
}

void unblankDisplay(void)
{
	setBit(PORT_BLANKING, BV_BLANKING);
    1cca:	42 9a       	sbi	0x08, 2	; 8
	setBit(PORT_POLARITY, BV_POLARITY);
    1ccc:	5f 9a       	sbi	0x0b, 7	; 11
    1cce:	08 95       	ret

00001cd0 <__vector_14>:
	global_excercise_flag = 0;
	global_excercise_counter = 0;
}

ISR(TIMER0_COMPA_vect)
{
    1cd0:	1f 92       	push	r1
    1cd2:	0f 92       	push	r0
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	0f 92       	push	r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	2f 93       	push	r18
    1cdc:	3f 93       	push	r19
    1cde:	4f 93       	push	r20
    1ce0:	5f 93       	push	r21
    1ce2:	6f 93       	push	r22
    1ce4:	7f 93       	push	r23
    1ce6:	8f 93       	push	r24
    1ce8:	9f 93       	push	r25
    1cea:	af 93       	push	r26
    1cec:	bf 93       	push	r27
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
	if(global_nixie_brightness_counter <= global_nixie_brightness)
    1cf2:	90 91 e6 01 	lds	r25, 0x01E6
    1cf6:	80 91 e5 01 	lds	r24, 0x01E5
    1cfa:	89 17       	cp	r24, r25
    1cfc:	58 f1       	brcs	.+86     	; 0x1d54 <__vector_14+0x84>
	{
		if(global_excercise_flag & (global_excercise_counter==10))
    1cfe:	20 91 e8 01 	lds	r18, 0x01E8
    1d02:	30 91 e7 01 	lds	r19, 0x01E7
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	3a 30       	cpi	r19, 0x0A	; 10
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <__vector_14+0x42>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	82 23       	and	r24, r18
    1d16:	93 23       	and	r25, r19
    1d18:	89 2b       	or	r24, r25
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <__vector_14+0x54>
		{
			display_excercise(global_digits);
    1d1c:	85 ec       	ldi	r24, 0xC5	; 197
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	0e 94 c0 0c 	call	0x1980	; 0x1980 <display_excercise>
		}
		global_nixie_brightness_counter++;
    1d24:	80 91 e6 01 	lds	r24, 0x01E6
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	80 93 e6 01 	sts	0x01E6, r24
		map_digits(global_digits, global_mapped_digits);
    1d2e:	65 ed       	ldi	r22, 0xD5	; 213
    1d30:	71 e0       	ldi	r23, 0x01	; 1
    1d32:	85 ec       	ldi	r24, 0xC5	; 197
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <map_digits>
		generate_bitstream(global_bitstream, global_mapped_digits);
    1d3a:	65 ed       	ldi	r22, 0xD5	; 213
    1d3c:	71 e0       	ldi	r23, 0x01	; 1
    1d3e:	89 eb       	ldi	r24, 0xB9	; 185
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <generate_bitstream>
		load_latches(global_bitstream);
    1d46:	89 eb       	ldi	r24, 0xB9	; 185
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <load_latches>
		unblankDisplay();
    1d4e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <unblankDisplay>
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <__vector_14+0x92>
	}
	else 
	{
		global_nixie_brightness_counter++;
    1d54:	80 91 e6 01 	lds	r24, 0x01E6
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	80 93 e6 01 	sts	0x01E6, r24
		blankDisplay();
    1d5e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <blankDisplay>
	}
	if(global_nixie_brightness_counter == 8)
    1d62:	80 91 e6 01 	lds	r24, 0x01E6
    1d66:	88 30       	cpi	r24, 0x08	; 8
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <__vector_14+0x9e>
		global_nixie_brightness_counter = 0;
    1d6a:	10 92 e6 01 	sts	0x01E6, r1
	
	if(global_excercise_counter==10)	
    1d6e:	80 91 e7 01 	lds	r24, 0x01E7
    1d72:	8a 30       	cpi	r24, 0x0A	; 10
    1d74:	19 f4       	brne	.+6      	; 0x1d7c <__vector_14+0xac>
		global_excercise_counter=0;
    1d76:	10 92 e7 01 	sts	0x01E7, r1
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <__vector_14+0xb6>
	else
		global_excercise_counter++;
    1d7c:	80 91 e7 01 	lds	r24, 0x01E7
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	80 93 e7 01 	sts	0x01E7, r24
		
}
    1d86:	ff 91       	pop	r31
    1d88:	ef 91       	pop	r30
    1d8a:	bf 91       	pop	r27
    1d8c:	af 91       	pop	r26
    1d8e:	9f 91       	pop	r25
    1d90:	8f 91       	pop	r24
    1d92:	7f 91       	pop	r23
    1d94:	6f 91       	pop	r22
    1d96:	5f 91       	pop	r21
    1d98:	4f 91       	pop	r20
    1d9a:	3f 91       	pop	r19
    1d9c:	2f 91       	pop	r18
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <init_twi>:

/* TWI Control Functions */
void init_twi(void)
{
	// For an 8MHz System Clock, this Bus will run at 100kHz
	TWBR = 32;
    1da8:	80 e2       	ldi	r24, 0x20	; 32
    1daa:	80 93 b8 00 	sts	0x00B8, r24
	
	// And we enable the interface
	TWCR |= (1 << TWEN);
    1dae:	ec eb       	ldi	r30, 0xBC	; 188
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	84 60       	ori	r24, 0x04	; 4
    1db6:	80 83       	st	Z, r24
    1db8:	08 95       	ret

00001dba <twi_stop>:
	return(TWDR);
}

void twi_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1dba:	84 e9       	ldi	r24, 0x94	; 148
    1dbc:	80 93 bc 00 	sts	0x00BC, r24
    1dc0:	08 95       	ret

00001dc2 <twi_wait_for_complete>:
}

void twi_wait_for_complete(void)
{
	while (!(TWCR & (1<<TWINT)))
    1dc2:	ec eb       	ldi	r30, 0xBC	; 188
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	ec f7       	brge	.-6      	; 0x1dc6 <twi_wait_for_complete+0x4>
	;
    1dcc:	08 95       	ret

00001dce <twi_start>:
	TWCR |= (1 << TWEN);
}

void twi_start(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1dce:	84 ea       	ldi	r24, 0xA4	; 164
    1dd0:	80 93 bc 00 	sts	0x00BC, r24
	twi_wait_for_complete();
    1dd4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <twi_wait_for_complete>
    1dd8:	08 95       	ret

00001dda <twi_send_byte>:
}

void twi_send_byte(uint8_t byte)
{
	TWDR = byte;
    1dda:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    1dde:	84 e8       	ldi	r24, 0x84	; 132
    1de0:	80 93 bc 00 	sts	0x00BC, r24
	twi_wait_for_complete();
    1de4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <twi_wait_for_complete>
    1de8:	08 95       	ret

00001dea <twi_recieve_byte_ack>:
}

uint8_t twi_recieve_byte_ack(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1dea:	84 ec       	ldi	r24, 0xC4	; 196
    1dec:	80 93 bc 00 	sts	0x00BC, r24
	twi_wait_for_complete();
    1df0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <twi_wait_for_complete>
	return(TWDR);
    1df4:	80 91 bb 00 	lds	r24, 0x00BB
}
    1df8:	08 95       	ret

00001dfa <twi_recieve_byte_noack>:

uint8_t twi_recieve_byte_noack(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN);
    1dfa:	84 e8       	ldi	r24, 0x84	; 132
    1dfc:	80 93 bc 00 	sts	0x00BC, r24
	twi_wait_for_complete();
    1e00:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <twi_wait_for_complete>
	return(TWDR);
    1e04:	80 91 bb 00 	lds	r24, 0x00BB
}
    1e08:	08 95       	ret

00001e0a <init_usart>:
#include <util/setbaud.h>

/* USART Control Functions */
void init_usart(void)
{
	UBRR0H = UBRRH_VALUE;
    1e0a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    1e0e:	83 e3       	ldi	r24, 0x33	; 51
    1e10:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	UCSR0A |= (1 << U2X0);
	#else
	UCSR0A &= ~(1 << U2X0);
    1e14:	e0 ec       	ldi	r30, 0xC0	; 192
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8d 7f       	andi	r24, 0xFD	; 253
    1e1c:	80 83       	st	Z, r24
	#endif
	
	/* Enable Receiving */
	UCSR0B |= (1 << RXEN0);
    1e1e:	e1 ec       	ldi	r30, 0xC1	; 193
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	80 61       	ori	r24, 0x10	; 16
    1e26:	80 83       	st	Z, r24
	
	/* Enable Transmitting */
	UCSR0B |= (1 << TXEN0);
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 60       	ori	r24, 0x08	; 8
    1e2c:	80 83       	st	Z, r24
	
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));
    1e2e:	e2 ec       	ldi	r30, 0xC2	; 194
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	86 60       	ori	r24, 0x06	; 6
    1e36:	80 83       	st	Z, r24
    1e38:	08 95       	ret

00001e3a <__divmodhi4>:
    1e3a:	97 fb       	bst	r25, 7
    1e3c:	07 2e       	mov	r0, r23
    1e3e:	16 f4       	brtc	.+4      	; 0x1e44 <__divmodhi4+0xa>
    1e40:	00 94       	com	r0
    1e42:	07 d0       	rcall	.+14     	; 0x1e52 <__divmodhi4_neg1>
    1e44:	77 fd       	sbrc	r23, 7
    1e46:	09 d0       	rcall	.+18     	; 0x1e5a <__divmodhi4_neg2>
    1e48:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__udivmodhi4>
    1e4c:	07 fc       	sbrc	r0, 7
    1e4e:	05 d0       	rcall	.+10     	; 0x1e5a <__divmodhi4_neg2>
    1e50:	3e f4       	brtc	.+14     	; 0x1e60 <__divmodhi4_exit>

00001e52 <__divmodhi4_neg1>:
    1e52:	90 95       	com	r25
    1e54:	81 95       	neg	r24
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	08 95       	ret

00001e5a <__divmodhi4_neg2>:
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255

00001e60 <__divmodhi4_exit>:
    1e60:	08 95       	ret

00001e62 <__udivmodsi4>:
    1e62:	a1 e2       	ldi	r26, 0x21	; 33
    1e64:	1a 2e       	mov	r1, r26
    1e66:	aa 1b       	sub	r26, r26
    1e68:	bb 1b       	sub	r27, r27
    1e6a:	fd 01       	movw	r30, r26
    1e6c:	0d c0       	rjmp	.+26     	; 0x1e88 <__udivmodsi4_ep>

00001e6e <__udivmodsi4_loop>:
    1e6e:	aa 1f       	adc	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	ee 1f       	adc	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	a2 17       	cp	r26, r18
    1e78:	b3 07       	cpc	r27, r19
    1e7a:	e4 07       	cpc	r30, r20
    1e7c:	f5 07       	cpc	r31, r21
    1e7e:	20 f0       	brcs	.+8      	; 0x1e88 <__udivmodsi4_ep>
    1e80:	a2 1b       	sub	r26, r18
    1e82:	b3 0b       	sbc	r27, r19
    1e84:	e4 0b       	sbc	r30, r20
    1e86:	f5 0b       	sbc	r31, r21

00001e88 <__udivmodsi4_ep>:
    1e88:	66 1f       	adc	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	1a 94       	dec	r1
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <__udivmodsi4_loop>
    1e94:	60 95       	com	r22
    1e96:	70 95       	com	r23
    1e98:	80 95       	com	r24
    1e9a:	90 95       	com	r25
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	bd 01       	movw	r22, r26
    1ea2:	cf 01       	movw	r24, r30
    1ea4:	08 95       	ret

00001ea6 <__tablejump2__>:
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31

00001eaa <__tablejump__>:
    1eaa:	05 90       	lpm	r0, Z+
    1eac:	f4 91       	lpm	r31, Z
    1eae:	e0 2d       	mov	r30, r0
    1eb0:	09 94       	ijmp

00001eb2 <__udivmodhi4>:
    1eb2:	aa 1b       	sub	r26, r26
    1eb4:	bb 1b       	sub	r27, r27
    1eb6:	51 e1       	ldi	r21, 0x11	; 17
    1eb8:	07 c0       	rjmp	.+14     	; 0x1ec8 <__udivmodhi4_ep>

00001eba <__udivmodhi4_loop>:
    1eba:	aa 1f       	adc	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	a6 17       	cp	r26, r22
    1ec0:	b7 07       	cpc	r27, r23
    1ec2:	10 f0       	brcs	.+4      	; 0x1ec8 <__udivmodhi4_ep>
    1ec4:	a6 1b       	sub	r26, r22
    1ec6:	b7 0b       	sbc	r27, r23

00001ec8 <__udivmodhi4_ep>:
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	5a 95       	dec	r21
    1ece:	a9 f7       	brne	.-22     	; 0x1eba <__udivmodhi4_loop>
    1ed0:	80 95       	com	r24
    1ed2:	90 95       	com	r25
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>
